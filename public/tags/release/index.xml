<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MapStruct</title>
    <link>http://mapstruct.org/tags/release/index.xml</link>
    <description>Recent content on MapStruct</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://mapstruct.org/tags/release/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MapStruct 1.1.0.Final seen in the wild!</title>
      <link>http://mapstruct.org/news/2016-11-22-mapstruct-1_1_0_Final-seen-in-the-wild/</link>
      <pubDate>Tue, 22 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2016-11-22-mapstruct-1_1_0_Final-seen-in-the-wild/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m more than thrilled to report that MapStruct 1.1 Final has been spotted in the wild!
We grew that puppy for almost one year since the announcement of &lt;a href=&#34;http://mapstruct.org/news/2015/11/25/mapstruct-1_0_Final-released.html&#34;&gt;MapStruct 1.0&lt;/a&gt;, so it was about time to let it go and put a final release into your hands.&lt;/p&gt;

&lt;p&gt;Besides a plethora of bug fixes the 1.1 release adds many new features which should be very welcome to users of MapStruct 1.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nested target properties&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ValueMapping&lt;/code&gt; annotation for enum mappings&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Named&lt;/code&gt; annotation for simple string based mapping qualifiers&lt;/li&gt;
&lt;li&gt;Support for custom &lt;code&gt;hasXyz()&lt;/code&gt; methods to check the presence of source properties instead of null checks&lt;/li&gt;
&lt;li&gt;Extended support of &lt;code&gt;java.text.NumberFormat&lt;/code&gt; for Number types to String mapping&lt;/li&gt;
&lt;li&gt;OSGi support&lt;/li&gt;
&lt;li&gt;New built-in conversions around date/time type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;This list is by no means exhaustive.
Check out the individual announcements for the &lt;a href=&#34;http://mapstruct.org/news/2016/03/16/mapstruct-1_1_0_Beta1-released.html&#34;&gt;Beta1&lt;/a&gt;, &lt;a href=&#34;http://mapstruct.org/news/2016/07/22/mapstruct-1_1_0_Beta2-released.htmll&#34;&gt;Beta2&lt;/a&gt;, &lt;a href=&#34;http://mapstruct.org/news/2016/09/07/mapstruct-1_1_0_CR1.html&#34;&gt;CR1&lt;/a&gt; and &lt;a href=&#34;http://mapstruct.org/news/2016/11/08/mapstruct-1_1_0_CR2-is-out.html&#34;&gt;CR2&lt;/a&gt; releases for all the details.
Also be sure to take a look at the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/wiki/Migration-notes&#34;&gt;migration notes&lt;/a&gt; to learn more about some issues to consider when migrating from MapStruct 1.0 to 1.1.&lt;/p&gt;

&lt;p&gt;MapStruct would be nowhere without its steadily growing community of users and contributors.
So let me say a big thank you to everyone involved, be it through reporting bugs, starting discussions on the mailing list and of course helping out with contributions on the code base itself.&lt;/p&gt;

&lt;p&gt;The following people have sent in code changes for MapStruct 1.1: &lt;a href=&#34;https://github.com/grandmasterpixel&#34;&gt;Vincent Alexander Beelte&lt;/a&gt;, &lt;a href=&#34;https://github.com/greuelpirat&#34;&gt;Oliver Ehrenm√ºller&lt;/a&gt;, &lt;a href=&#34;https://github.com/dgruntz&#34;&gt;Dominik Gruntz&lt;/a&gt;, &lt;a href=&#34;https://github.com/filiphr&#34;&gt;Filip Hrisafov&lt;/a&gt;, &lt;a href=&#34;https://github.com/seanjob&#34;&gt;Sean Huang&lt;/a&gt;, &lt;a href=&#34;https://github.com/tisoft&#34;&gt;Markus Heberling&lt;/a&gt;, &lt;a href=&#34;https://github.com/xCASx&#34;&gt;Maxim Kolesnikov&lt;/a&gt;, &lt;a href=&#34;https://github.com/pjlarson&#34;&gt;Peter Larson&lt;/a&gt;, &lt;a href=&#34;https://github.com/cliedeman&#34;&gt;Ciaran Liedeman&lt;/a&gt;, &lt;a href=&#34;https://github.com/streetturtle&#34;&gt;Pavel Makhov&lt;/a&gt;, &lt;a href=&#34;https://github.com/osthus-sm&#34;&gt;Stefan May&lt;/a&gt;, &lt;a href=&#34;https://github.com/samwright&#34;&gt;Samuel Wright&lt;/a&gt; as well as MapStruct old-timers and dear fellows &lt;a href=&#34;https://github.com/agudian&#34;&gt;Andreas Gudian&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjaakd&#34;&gt;Sjaak Derksen&lt;/a&gt;.
Kudos to you, your efforts and hard work are highly appreciated!&lt;/p&gt;

&lt;p&gt;Also let me use the opportunity and introduce Filip Hrisafov to you, the latest committer to the project.
He has been very busy with hacking on MapStruct lately, first by adding some more built-in conversions around date and time types, and now working on the long-awaited support for field based mappings.
Welcome aboard, Filip!&lt;/p&gt;

&lt;h3 id=&#34;some-stats&#34;&gt;Some stats&lt;/h3&gt;

&lt;p&gt;Speaking of numbers and stats, not only the number of contributors grew, also adoption numbers steadily increased over the course of the last year.
We see more and more discussions in our &lt;a href=&#34;https://groups.google.com/forum/#!forum/mapstruct-users&#34;&gt;Google group&lt;/a&gt; and increasing numbers of &lt;a href=&#34;http://stackoverflow.com/questions/tagged/mapstruct&#34;&gt;MapStruct-related questions&lt;/a&gt; on Stack Overflow as well as &lt;a href=&#34;http://www.timqian.com/star-history/#mapstruct/mapstruct&#34;&gt;star gazers&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;p&gt;Most impressive though are the download numbers we get from the Maven Central repo.
As an example here are the numbers for the &lt;em&gt;org.mapstruct:mapstruct&lt;/em&gt; artifact:&lt;/p&gt;

&lt;div style=&#34;text-align:center&#34;&gt;
    &lt;img src=&#34;http://mapstruct.org/images/downloads_2016.png&#34; style=&#34;padding-bottom: 3px;&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;The downloads grew by factor 5 from about 10,000 in November 2015 to about 50,000 in the last month.
It&amp;rsquo;s just great to see that MapStruct is that useful for so many users out there!&lt;/p&gt;

&lt;h3 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;

&lt;p&gt;Finally let&amp;rsquo;s take a look at what to expect from MapStruct in the next time.
As already discussed in the &lt;a href=&#34;http://mapstruct.org/news/2016/11/08/mapstruct-1_1_0_CR2-is-out.html&#34;&gt;CR 2 announcement&lt;/a&gt;, we&amp;rsquo;d like to get out MapStruct 1.2 much quicker than 1.1, so you can expect it in much less than one year from now :)&lt;/p&gt;

&lt;p&gt;Two features planned for 1.2 are the aforementioned &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues/557&#34;&gt;field based mappings&lt;/a&gt; and support for &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues/73&#34;&gt;immutable beans&lt;/a&gt; on the target side by leveraging non-default constructors.
Also take a look at the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?q=is%3Aissue+is%3Aopen+label%3Afeature&#34;&gt;backlog&lt;/a&gt;.
If there is anything in there you&amp;rsquo;d like to see addressed rather sooner than later, let us know by commenting or voting.&lt;/p&gt;

&lt;p&gt;Our general idea is to keep the number of new features per release a bit lower and in turn do more frequent releases, living up to the &amp;ldquo;Release early, release often&amp;rdquo; principle.&lt;/p&gt;

&lt;h3 id=&#34;download&#34;&gt;Download&lt;/h3&gt;

&lt;p&gt;Use these GAV coordinates with Maven, Gradle or similar dependency management tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct|1.1.0.Final|jar&#34;&gt;org.mapstruct:mapstruct:1.1.0.Final&lt;/a&gt; for the annotation JAR (to be used with Java &amp;lt;= 7) or &lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-jdk8|1.1.0.Final|jar&#34;&gt;org.mapstruct:mapstruct-jdk8:1.1.0.Final&lt;/a&gt; (for usage with Java &amp;gt;= 8)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-processor|1.1.0.Final|jar&#34;&gt;org.mapstruct:mapstruct-processor:1.1.0.Final&lt;/a&gt; for the annotation processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, you can obtain distribution bundles containing the binaries, source and documentation from &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.1.0.Final/&#34;&gt;SourceForge&lt;/a&gt; or &lt;a href=&#34;https://bintray.com/mapstruct/bundles/mapstruct-dist/1.1.0.Final&#34;&gt;BinTray&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get help at the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group or in our &lt;a href=&#34;https://gitter.im/mapstruct/mapstruct-users&#34;&gt;Gitter room&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs and feature requests via the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/GetMapStruct&#34;&gt;@GetMapStruct&lt;/a&gt; on Twitter&lt;/li&gt;
&lt;li&gt;Follow MapStruct on &lt;a href=&#34;https://plus.google.com/u/0/118070742567787866481/posts&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>MapStruct 1.1.0.CR2 is out</title>
      <link>http://mapstruct.org/news/2016-11-08-mapstruct-1_1_0_CR2-is-out/</link>
      <pubDate>Tue, 08 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2016-11-08-mapstruct-1_1_0_CR2-is-out/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s my pleasure to announce the second candidate release of MapStruct 1.1!&lt;/p&gt;

&lt;p&gt;This release fixes several bugs discovered in the first CR but also adds some new built-in conversions around date/time types (e.g. from/to the &lt;code&gt;java.sql.*&lt;/code&gt; types and between &lt;code&gt;java.time.LocalDate&lt;/code&gt; and &lt;code&gt;java.util.Date&lt;/code&gt;).
Normally, we wouldn&amp;rsquo;t add new functionality during the CR phase, but as these conversions have been contributed by community members (kudos to you!), we thought it&amp;rsquo;d be nice to put them into a release as soon as possible.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Please check out the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?q=milestone%3A1.1.0.CR2&#34;&gt;change log&lt;/a&gt; for the complete list of closed issues.
Also take a look at the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/wiki/Migration-notes#110cr2&#34;&gt;migration notes&lt;/a&gt; as there has been a slight behavioral change related to nested source properties requiring conversion and the null checks in the generated code.
We strongly recommend testing against MapStruct 1.1.0.CR2 to everyone.
If you find any further bugs when using the CR in your project, please report them to our &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt; as soon as possible.&lt;/p&gt;

&lt;p&gt;Many thanks to all the bug reporters and everyone contributing to the CR2 release, be it with code or documentation: &lt;a href=&#34;https://github.com/filiphr&#34;&gt;Filip Hrisafov&lt;/a&gt;, &lt;a href=&#34;https://github.com/osthus-sm&#34;&gt;Stefan May&lt;/a&gt;, &lt;a href=&#34;https://github.com/pjlarson&#34;&gt;Peter Larson&lt;/a&gt;, &lt;a href=&#34;https://github.com/streetturtle&#34;&gt;Pavel Makhov&lt;/a&gt;, &lt;a href=&#34;https://github.com/xCASx&#34;&gt;Maxim Kolesnikov&lt;/a&gt; and &lt;a href=&#34;https://github.com/dgruntz&#34;&gt;Dominik Gruntz&lt;/a&gt;.
You guys rock!&lt;/p&gt;

&lt;h3 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;

&lt;p&gt;Unless any further issues arise, we&amp;rsquo;ve planned to do the 1.1 Final release by the end of next week.&lt;/p&gt;

&lt;p&gt;After that we&amp;rsquo;d like to come to MapStruct 1.2 rather quickly.
The &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?q=is%3Aissue+is%3Aopen+label%3Afeature&#34;&gt;backlog&lt;/a&gt; is filled and there are already some pull requests for new features waiting to be merged.
So you can look forward to support of &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues/557&#34;&gt;field based mappings&lt;/a&gt;, support for &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues/73&#34;&gt;immutable beans&lt;/a&gt; on the target side by using non-default constructors and some more.&lt;/p&gt;

&lt;p&gt;The 1.2 release can be expected to be much more focused in scope than 1.1.
We&amp;rsquo;ve felt that it took a bit too long to get from 1.0 to 1.1, one reason being that we kept on adding new features during the Beta phase which got a bit in the way of finalizing the release.
From 1.2 onwards, we&amp;rsquo;ll keep the number of new features per release lower which should allow us to release more often and get the features already done into your hands more quickly. &amp;ldquo;Release early, release often&amp;rdquo; as they say!&lt;/p&gt;

&lt;h3 id=&#34;download&#34;&gt;Download&lt;/h3&gt;

&lt;p&gt;To fetch MapStruct 1.1.0.CR2 via Maven, Gradle or similar dependency management tools, use the following GAV coordinates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct|1.1.0.CR2|jar&#34;&gt;org.mapstruct:mapstruct:1.1.0.CR2&lt;/a&gt; for the annotation JAR (to be used with Java &amp;lt;= 7) or &lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-jdk8|1.1.0.CR2|jar&#34;&gt;org.mapstruct:mapstruct-jdk8:1.1.0.CR2&lt;/a&gt; (for usage with Java &amp;gt;= 8)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-processor|1.1.0.CR2|jar&#34;&gt;org.mapstruct:mapstruct-processor:1.1.0.CR2&lt;/a&gt; for the annotation processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, you can download distribution bundles (ZIP, TAR.GZ) from &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.1.0.CR2/&#34;&gt;SourceForge&lt;/a&gt; or &lt;a href=&#34;https://bintray.com/mapstruct/bundles/mapstruct-dist/1.1.0.CR2&#34;&gt;BinTray&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get help at the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group or in our &lt;a href=&#34;https://gitter.im/mapstruct/mapstruct-users&#34;&gt;Gitter room&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs and feature requests via the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/GetMapStruct&#34;&gt;@GetMapStruct&lt;/a&gt; on Twitter&lt;/li&gt;
&lt;li&gt;Follow MapStruct on &lt;a href=&#34;https://plus.google.com/u/0/118070742567787866481/posts&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>MapStruct 1.1.0.CR1 released</title>
      <link>http://mapstruct.org/news/2016-09-07-mapstruct-1_1_0_CR1/</link>
      <pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2016-09-07-mapstruct-1_1_0_CR1/</guid>
      <description>&lt;p&gt;MapStruct 1.1.0.CR1 consolodates the functionality introduced in the preceeding MapStruct 1.1.0 Beta releases. A number of bugs were solved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automatic generation of an iterable mapping methods where the property selection is based on a qualfier.&lt;/li&gt;
&lt;li&gt;Collection source getter null check to avoid NullPointExceptions.&lt;/li&gt;
&lt;li&gt;Missing imports for generic types in collections in generated methods.&lt;/li&gt;
&lt;li&gt;Removing redundant code from generated code when using nested source properties.&lt;/li&gt;
&lt;li&gt;Optimisation when using enum constant (using an enum constant instead of a String conversion).&lt;/li&gt;
&lt;li&gt;Fixing order for dependsOn.&lt;/li&gt;
&lt;li&gt;Fixing an issue introduced 1.1.0.Beta2 that causes problems for the @MappingTarget in combination with @InheritInverseConfiguration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The list of closed issues can be found in the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?q=milestone%3A1.1.0.CR1&#34;&gt;change log&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, the documentation is improved on our AccessorNamingStrategy Service Provider Interface. An example has been added &lt;a href=&#34;https://github.com/mapstruct/mapstruct-examples&#34;&gt;Examples repository&lt;/a&gt; to support the documentation.&lt;/p&gt;

&lt;p&gt;Thanks to: &lt;a href=&#34;https://github.com/tisoft&#34;&gt;Markus Heberling&lt;/a&gt;, and &lt;a href=&#34;https://github.com/filiphr&#34;&gt;Filip Hrisafov&lt;/a&gt; for their contribution!&lt;/p&gt;

&lt;h3 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;

&lt;p&gt;Our intent is to release 1.1.0.Final in two weeks from now. We&amp;rsquo;re having some small enhancements and bug fixes planned for that.&lt;/p&gt;

&lt;h3 id=&#34;one-more-thing&#34;&gt;One more thing&lt;/h3&gt;

&lt;p&gt;MapStruct has been nominated for an award in the category &amp;ldquo;Most innovative contribution to the Java ecosystem&amp;rdquo; on &lt;a href=&#34;https://jaxlondon.com/jax-awards/&#34;&gt;JAX London&lt;/a&gt; &amp;ndash; in case you&amp;rsquo;d like to cast a vote for your favourite bean mapping generator.&lt;/p&gt;

&lt;h3 id=&#34;download&#34;&gt;Download&lt;/h3&gt;

&lt;p&gt;To fetch MapStruct 1.1.0.CR1 via Maven, Gradle or similar dependency management tools, use the following GAV coordinates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct|1.1.0.CR1|jar&#34;&gt;org.mapstruct:mapstruct:1.1.0.CR1&lt;/a&gt; for the annotation JAR (to be used with Java &amp;lt;= 7) or &lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-jdk8|1.1.0.CR1|jar&#34;&gt;org.mapstruct:mapstruct-jdk8:1.1.0.CR1&lt;/a&gt; (for usage with Java &amp;gt;= 8)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-processor|1.1.0.CR1|jar&#34;&gt;org.mapstruct:mapstruct-processor:1.1.0.CR1&lt;/a&gt; for the annotation processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, you can download distribution bundles (ZIP, TAR.GZ) from &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.1.0.CR1/&#34;&gt;SourceForge&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get help at the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group or in our &lt;a href=&#34;https://gitter.im/mapstruct/mapstruct-users&#34;&gt;Gitter room&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs and feature requests via the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/GetMapStruct&#34;&gt;@GetMapStruct&lt;/a&gt; on Twitter&lt;/li&gt;
&lt;li&gt;Follow MapStruct on &lt;a href=&#34;https://plus.google.com/u/0/118070742567787866481/posts&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>MapStruct 1.1.0.Beta2 released</title>
      <link>http://mapstruct.org/news/2016-07-22-mapstruct-1_1_0_Beta2-released/</link>
      <pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2016-07-22-mapstruct-1_1_0_Beta2-released/</guid>
      <description>&lt;p&gt;It has been a while since the latest release of MapStruct. Via our mailing list, issue list and other channels we have received valuable feedback. We have tried to incorporate some of that feedback into a number of new features.&lt;/p&gt;

&lt;p&gt;MapStruct 1.1.0.Beta2 introduces a number of popular requested features, like source presence check and nested target properties.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Today we release MapStruct 1.1.0.Beta2, containing fixes for most of the user-reported bugs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mapping of nested target properties.&lt;/li&gt;
&lt;li&gt;Support of using &lt;code&gt;hasXYZ&lt;/code&gt; presence checker methods instead of &lt;code&gt;null&lt;/code&gt; checks on the source side of bean mappings. The presence checker naming convention can be overidden by providing a custom SPI implementation.&lt;/li&gt;
&lt;li&gt;Extended support of &lt;code&gt;java.text.NumberFormat&lt;/code&gt; for Number types to String mapping.&lt;/li&gt;
&lt;li&gt;Provide OSGI-enabled jars.&lt;/li&gt;
&lt;li&gt;Fix a compatibility issue with Eclipse Neon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The complete list of closed issues can be found in the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?q=milestone%3A1.1.0.Beta2&#34;&gt;change log&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The MapStruct teams thanks: &lt;a href=&#34;https://github.com/seanjob&#34;&gt;Sean Huang&lt;/a&gt;, and &lt;a href=&#34;https://github.com/cliedeman&#34;&gt;Ciaran Liedeman&lt;/a&gt; for their contribution!&lt;/p&gt;

&lt;h3 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;

&lt;p&gt;We hope to release 1.1.0.CR1 in a short while (after the summer holidays).&lt;/p&gt;

&lt;p&gt;Please also checkout our examples &lt;a href=&#34;https://github.com/mapstruct/mapstruct-examples&#34;&gt;GitHub examples repository&lt;/a&gt;. It is still small but the intention is to make this a repository of typical mapping problems and how to solve them with MapStruct. Contributing good examples is appriciated.&lt;/p&gt;

&lt;h3 id=&#34;download&#34;&gt;Download&lt;/h3&gt;

&lt;p&gt;To fetch MapStruct 1.1.0.Beta2 via Maven, Gradle or similar dependency management tools, use the following GAV coordinates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct|1.1.0.Beta2|jar&#34;&gt;org.mapstruct:mapstruct:1.1.0.Beta2&lt;/a&gt; for the annotation JAR (to be used with Java &amp;lt;= 7) or &lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-jdk8|1.1.0.Beta2|jar&#34;&gt;org.mapstruct:mapstruct-jdk8:1.1.0.Beta2&lt;/a&gt; (for usage with Java &amp;gt;= 8)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-processor|1.1.0.Beta2|jar&#34;&gt;org.mapstruct:mapstruct-processor:1.1.0.Beta2&lt;/a&gt; for the annotation processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, you can download distribution bundles (ZIP, TAR.GZ) from &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.1.0.Beta2/&#34;&gt;SourceForge&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get help at the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group or in our &lt;a href=&#34;https://gitter.im/mapstruct/mapstruct-users&#34;&gt;Gitter room&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs and feature requests via the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/GetMapStruct&#34;&gt;@GetMapStruct&lt;/a&gt; on Twitter&lt;/li&gt;
&lt;li&gt;Follow MapStruct on &lt;a href=&#34;https://plus.google.com/u/0/118070742567787866481/posts&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope that you&amp;rsquo;ll find the new features valuable.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MapStruct 1.1.0.Beta1 released</title>
      <link>http://mapstruct.org/news/2016-03-16-mapstruct-1_1_0_Beta1-released/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2016-03-16-mapstruct-1_1_0_Beta1-released/</guid>
      <description>&lt;p&gt;It has been four months since the release of the first final version of MapStruct. We&amp;rsquo;ve received a lot of great feedback and noticed a substantial increase of interest in the project. A couple of bugs were reported that we intend to fix with MapStruct 1.1 while also working on new features.&lt;/p&gt;

&lt;p&gt;Today we release MapStruct 1.1.0.Beta1, containing fixes for most of the user-reported bugs. But we&amp;rsquo;ve also added some improvements and prepared for new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The new annotation &lt;code&gt;@ValueMapping&lt;/code&gt; is introduced to be used for &lt;code&gt;enum&lt;/code&gt; mappings. Previously, you would have used &lt;code&gt;@Mapping&lt;/code&gt; for this, but we found a separate annotation makes things more clear and puts us in a better position for some upcoming features. The usage of &lt;code&gt;@Mapping&lt;/code&gt; for &lt;code&gt;enum&lt;/code&gt; mappings now triggers a &lt;em&gt;deprecation warning&lt;/em&gt; and asks you to use &lt;code&gt;@ValueMapping&lt;/code&gt; instead.&lt;/li&gt;
&lt;li&gt;The new annotation &lt;code&gt;@Named&lt;/code&gt; is a predefined &lt;code&gt;@Qualifier&lt;/code&gt; that can be used when creating a custom qualifier annotation seems too inconvenient.&lt;/li&gt;
&lt;li&gt;Handling of types with generically typed properties has been improved, so that you can now declare something like &lt;code&gt;SearchResult&amp;lt;VesselDto&amp;gt; vesselSearchResultToDto(SearchResult&amp;lt;Vessel&amp;gt; vessel)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The preferred way of configuring the annotation processor in Maven projects has been updated to leverage the latest &lt;code&gt;maven-compiler-plugin&lt;/code&gt; version&amp;rsquo;s &lt;code&gt;annotationProcessorPaths&lt;/code&gt; option, which makes the configuration a bit more smooth. &lt;a href=&#34;http://mapstruct.org/documentation/1.1/reference/html/index.html#setup&#34;&gt;Check the updated documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The complete list of 24 closed issues can be found in the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?q=milestone%3A1.1.0.Beta1&#34;&gt;change log&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The MapStruct team calls out a big &lt;em&gt;Thank you!&lt;/em&gt; to everyone contributing to this release: &lt;a href=&#34;https://github.com/grandmasterpixel&#34;&gt;Vincent Alexander Beelte&lt;/a&gt;, &lt;a href=&#34;https://github.com/greuelpirat&#34;&gt;Oliver Ehrenm√ºller&lt;/a&gt;, and &lt;a href=&#34;https://github.com/samwright&#34;&gt;Samuel Wright&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;

&lt;p&gt;We plan the beta phase to be a short one, with a 1.1.0.CR1 release following in a couple of weeks.&lt;/p&gt;

&lt;p&gt;In the mean time, you&amp;rsquo;re invited to try out the MapStruct &lt;a href=&#34;https://github.com/mapstruct/mapstruct-eclipse&#34;&gt;Eclipse plug-in&lt;/a&gt;. Although it&amp;rsquo;s in an early stage, it already contains some handy content-assists (e.g. for &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt; property names in the &lt;code&gt;@Mapping&lt;/code&gt; annotation) and quick-fixes for some common mapping errors detected by MapStruct.&lt;/p&gt;

&lt;h3 id=&#34;download&#34;&gt;Download&lt;/h3&gt;

&lt;p&gt;To fetch MapStruct 1.1.0.Beta1 via Maven, Gradle or similar dependency management tools, use the following GAV coordinates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct|1.1.0.Beta1|jar&#34;&gt;org.mapstruct:mapstruct:1.1.0.Beta1&lt;/a&gt; for the annotation JAR (to be used with Java &amp;lt;= 7) or &lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-jdk8|1.1.0.Beta1|jar&#34;&gt;org.mapstruct:mapstruct-jdk8:1.1.0.Beta1&lt;/a&gt; (for usage with Java &amp;gt;= 8)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-processor|1.1.0.Beta1|jar&#34;&gt;org.mapstruct:mapstruct-processor:1.1.0.Beta1&lt;/a&gt; for the annotation processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, you can download distribution bundles (ZIP, TAR.GZ) from &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.1.0.Beta1/&#34;&gt;SourceForge&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get help at the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group or in our &lt;a href=&#34;https://gitter.im/mapstruct/mapstruct-users&#34;&gt;Gitter room&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs and feature requests via the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/GetMapStruct&#34;&gt;@GetMapStruct&lt;/a&gt; on Twitter&lt;/li&gt;
&lt;li&gt;Follow MapStruct on &lt;a href=&#34;https://plus.google.com/u/0/118070742567787866481/posts&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy Mapping!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MapStruct 1.0 Final released</title>
      <link>http://mapstruct.org/news/2015-11-25-mapstruct-1_0_Final-released/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2015-11-25-mapstruct-1_0_Final-released/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s with great pleasure and excitement that I announce the final release of MapStruct 1.0!&lt;/p&gt;

&lt;p&gt;MapStruct is a source code generator for efficient, type-safe mappings between Java bean types, based on &lt;a href=&#34;http://mapstruct.org/documentation/#section-def-mapper&#34;&gt;annotated interface definitions&lt;/a&gt;. It works in your command line builds (e.g. via Maven or Gradle) as well as your favourite IDE. The advantages of this approach are manifold:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Great performance:&lt;/strong&gt; Plain method invocations only, no use of reflection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compile-time type safety:&lt;/strong&gt; Only objects and attributes actually mapping to each other can be mapped, no accidental mapping of an order entity into a customer DTO etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self-contained code:&lt;/strong&gt; no runtime dependencies&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Early validation and fast feedback:&lt;/strong&gt; Clear error-reports right at build time if mappings are not complete or incorrect&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy to debug:&lt;/strong&gt; You can inspect the generated mapping in your IDE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are new to MapStruct, I recommend you check out the &amp;ldquo;MapStruct in 2 minutes&amp;rdquo; section on the &lt;a href=&#34;http://mapstruct.org/&#34;&gt;homepage&lt;/a&gt; to see what MapStruct can do for you and how it works.&lt;/p&gt;

&lt;h3 id=&#34;looking-back&#34;&gt;Looking back&amp;hellip;&lt;/h3&gt;

&lt;p&gt;When I started the project over three years ago, I was quite fond of the idea of addressing the mapping issue with code generation, but I didn&amp;rsquo;t really expect much interest by others. But, the wonders of open source happened and people started to ask questions about the project on the mailing list, filed feature and pull requests, &lt;a href=&#34;http://tux2323.blogspot.de/2014/03/mapstruct-java-bean-mappings.html&#34;&gt;presented&lt;/a&gt; &lt;a href=&#34;http://blog.goyello.com/2015/08/11/take-the-map-dto-survival-code/&#34;&gt;MapStruct&lt;/a&gt; &lt;a href=&#34;http://www.frank-rahn.de/java-bean-mapper/&#34;&gt;in&lt;/a&gt; &lt;a href=&#34;http://javabarista.blogspot.de/2015/04/bean-mapping-mit-mapstruct.html&#34;&gt;blog&lt;/a&gt; &lt;a href=&#34;https://samerabdelkafi.wordpress.com/2015/10/18/mapstruct/&#34;&gt;posts&lt;/a&gt; and &lt;a href=&#34;http://www.muchsoft.com/presentations/MATHEMA-Campus-2015-MapStruct.pdf&#34;&gt;conference&lt;/a&gt; &lt;a href=&#34;http://de.slideshare.net/inovex/mapstruct-der-neue-stern-am-beanmapping-himmel&#34;&gt;talks&lt;/a&gt;, etc. Apparently, the project scratched an itch for many.&lt;/p&gt;

&lt;p&gt;A small - yet very active - community grew.&lt;/p&gt;

&lt;p&gt;Despite it&amp;rsquo;s pre-final status until today, MapStruct is very solid and stable and has been used successfully by lots of projects in a wide range of industries. The &lt;a href=&#34;http://jhipster.github.io/using_dtos.html&#34;&gt;recent integration&lt;/a&gt; into the JHipster stack greatly increased the project&amp;rsquo;s exposure and is a strong catalyst for further rising adoption. I can&amp;rsquo;t give you a list of Fortune 500 companies using it, but I bet some are :)&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a whole bunch of awesome people who have made this a reality. The project wouldn&amp;rsquo;t be near where it is today without their great ideas and hard work. It was &lt;a href=&#34;https://twitter.com/AndreasGudian&#34;&gt;Andreas Gudian&lt;/a&gt; who confirmed me in the usefulness of the project, so we picked it up again together after my initial enthusiam had shortly been fading a bit. Not much later &lt;a href=&#34;https://twitter.com/sjaakderksen&#34;&gt;Sjaak Derksen&lt;/a&gt; arrived to the scene and right from the spot he helped with hacking on the toughest issues which Andreas and I had not felt like attacking.&lt;/p&gt;

&lt;p&gt;In addition to these two fine guys many more have been contributing to the MapStruct code base over time in one way or the other: Christian Schuster, Christophe Labouisse, Dilip Krishnan, Ewald Volkert, Ivo Smid, Lars Wetzer, Lukasz Kryger, Michael Pardo, Mustafa Caylak, Paul Strugnell, Remko Plantenga, Sebastian Hasait, Stefan Rademacher, Timo Eckhardt, Tomek Gubala and anyone I may have forgotten.&lt;/p&gt;

&lt;p&gt;A huge thank you to all of you! Special kudos go to Gerd W√ºtherich who designed the logo for project, which had been a missing piece for the final release for quite some time :)&lt;/p&gt;

&lt;h3 id=&#34;and-forward&#34;&gt;&amp;hellip;and forward&lt;/h3&gt;

&lt;p&gt;With MapStruct 1.0 through the door, it&amp;rsquo;s time to think about what&amp;rsquo;s coming next.&lt;/p&gt;

&lt;p&gt;Based on user feedback, we&amp;rsquo;ve collected quite some ideas for a 1.1 release, be it support for custom bean constructors, direct field access or a small expression language for more concise and powerful inline mapping expressions. You input matters, so please raise your voice if you think something useful is missing from MapStruct.&lt;/p&gt;

&lt;p&gt;Another focus of attention will be on the MapStruct &lt;a href=&#34;https://github.com/mapstruct/mapstruct-eclipse&#34;&gt;Eclipse plug-in&lt;/a&gt; which already is quite capable but should be even more so with the planned refactoring support, more quick fixes etc. Also we&amp;rsquo;ve planned to make it available through the Eclipse market place. Last but not least, we&amp;rsquo;ll spend some time on improving the project website - especially the &lt;a href=&#34;http://mapstruct.org/documentation&#34;&gt;documentation page&lt;/a&gt; - in order to make all the contents added over time accessible in a better way.&lt;/p&gt;

&lt;p&gt;But in the meantime, enjoy the MapStruct 1.0.0.Final release!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s already on &lt;a href=&#34;http://search.maven.org/#search|ga|1|g%3A%22org.mapstruct%22&#34;&gt;Maven Central&lt;/a&gt; and &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.0.0.Final/&#34;&gt;SourceForge&lt;/a&gt;. Functionally, the Final is the same as CR2, just &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?q=milestone%3A1.0.0.Final+is%3Aclosed&#34;&gt;some remaining bugs&lt;/a&gt; have been fixed. We&amp;rsquo;d love to be hearing from you, so if you have any ideas, questions or other feedback on MapStruct, please get in touch through the following channels and we&amp;rsquo;ll be glad to help:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get help at the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group&lt;/li&gt;
&lt;li&gt;Report bugs and feature requests via the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/GetMapStruct&#34;&gt;@GetMapStruct&lt;/a&gt; on Twitter&lt;/li&gt;
&lt;li&gt;Follow MapStruct on &lt;a href=&#34;https://plus.google.com/u/0/118070742567787866481/posts&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy Mapping!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MapStruct 1.0.0.CR2 released</title>
      <link>http://mapstruct.org/news/2015-08-27-mapstruct-1_0_0_CR2-released/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2015-08-27-mapstruct-1_0_0_CR2-released/</guid>
      <description>

&lt;p&gt;It is my pleasure to announce the second candidate release of MapStruct 1.0!&lt;/p&gt;

&lt;p&gt;With this release, we&amp;rsquo;re fixing several bugs that showed up after our first candidate release. But we also received some great new feature contributions from the community that we wanted to include in our 1.0 release, so we decided to build this second candidate release before calling it a &lt;em&gt;final&lt;/em&gt;. Highlights of this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configure package and class name for the generated mapper implementations.&lt;/li&gt;
&lt;li&gt;Define default values for target properties in case the source property is &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The decorator feature now fully works with Spring and JSR 330 and the documentation has been clarified on how to use decorators with all our supported component models (CDI, Spring, JSR 330, default).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The complete list of 19 closed issues can be found in the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?q=milestone%3A1.0.0.CR2&#34;&gt;change log&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The MapStruct team calls out a big &lt;em&gt;Thank you!&lt;/em&gt; to everyone contributing to this release: &lt;a href=&#34;https://github.com/vgt-tomek&#34;&gt;Tomek Gubala&lt;/a&gt;, &lt;a href=&#34;https://github.com/bedla&#34;&gt;Ivo Smid&lt;/a&gt;, &lt;a href=&#34;https://github.com/luxmeter&#34;&gt;Mustafa Caylak&lt;/a&gt;, and &lt;a href=&#34;https://github.com/ggtools&#34;&gt;Christophe Labouisse&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&#34;download&#34;&gt;Download&lt;/h3&gt;

&lt;p&gt;To fetch MapStruct 1.0.0.CR2 via Maven, Gradle or similar dependency management tools, use the following GAV coordinates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct|1.0.0.CR2|jar&#34;&gt;org.mapstruct:mapstruct:1.0.0.CR2&lt;/a&gt; for the annotation JAR (to be used with Java &amp;lt;= 7) or &lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-jdk8|1.0.0.CR2|jar&#34;&gt;org.mapstruct:mapstruct-jdk8:1.0.0.CR2&lt;/a&gt; (for usage with Java &amp;gt;= 8)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-processor|1.0.0.CR2|jar&#34;&gt;org.mapstruct:mapstruct-processor:1.0.0.CR2&lt;/a&gt; for the annotation processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, you can download distribution bundles (ZIP, TAR.GZ) from &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.0.0.CR2/&#34;&gt;SourceForge&lt;/a&gt; or from &lt;a href=&#34;https://bintray.com/mapstruct/bundles/mapstruct-dist/1.0.0.CR2/&#34;&gt;BinTray&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;configure-package-and-class-name-for-the-generated-mapper-implementations&#34;&gt;Configure package and class name for the generated mapper implementations&lt;/h3&gt;

&lt;p&gt;By default, MapStruct generates the mapper implementation with the class name suffix &amp;ldquo;Impl&amp;rdquo; in the same package as the declared mapper interface or abstract class.&lt;/p&gt;

&lt;p&gt;If a project follows different naming conventions, package-dependency rules or simply a ambiguity needs to be resolved, the package name and the class name of the generated implementation can be configured:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
package com.examples.mappers;

...

@Mapper(implementationPackage = &#34;&amp;lt;PACKAGE_NAME&amp;gt;.internal&#34;, implementationClass = &#34;MapStruct&amp;lt;CLASS_NAME&amp;gt;Impl&#34;)
public interface PersonMapper {
    PersonMapper INSTANCE = Mappers.getMapper( PersonMapper.class );

    PersonDto toPersonDto(Person person);
}
&lt;/pre&gt;

&lt;p&gt;In the example above, the mapper implementation would be generated to the package &lt;code&gt;com.examples.mappers.internal&lt;/code&gt; with the class name &lt;code&gt;MapStructPersonMapperImpl&lt;/code&gt;. As you might have already guessed, the strings &lt;code&gt;&amp;lt;PACKAGE_NAME&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;CLASS_NAME&amp;gt;&lt;/code&gt; are replaced with the package name and the class name of the mapper interface or abstract class for which the implementation is generated.&lt;/p&gt;

&lt;p&gt;These options are also available in the annotation &lt;code&gt;@MapperConfig&lt;/code&gt;, so you can configure this once for all mappers that use the same &lt;a href=&#34;http://mapstruct.org/documentation/#section-shared-config&#34;&gt;@MapperConfig&lt;/a&gt; type.&lt;/p&gt;

&lt;p&gt;If you are using the component model &lt;code&gt;default&lt;/code&gt; (i.e. &lt;code&gt;Mappers.get(...)&lt;/code&gt;) to obtain your mapper instances, the generator will create an SPI file in &lt;em&gt;META-INF/services/&lt;/em&gt; for each mapper with a customized naming pattern. The implementation of &lt;code&gt;Mappers&lt;/code&gt; finds those implementation classes using the &lt;code&gt;ServiceLoader&lt;/code&gt; API.&lt;/p&gt;

&lt;h3 id=&#34;default-values-for-target-properties-in-case-the-source-property-is-null&#34;&gt;Default values for target properties in case the source property is null&lt;/h3&gt;

&lt;p&gt;Default values can be specified to set a predefined value to a target property if the corresponding source property is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper
public interface PersonMapper {
   @Mapping(target = &#34;middleName&#34;, defaultValue = &#34;&#34;),
   PersonDto toPersonDto(Person person);
}
&lt;/pre&gt;

&lt;p&gt;The implementation that is generated for the example above would set the property &lt;code&gt;middleName&lt;/code&gt; in the result object to the empty String &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; in case &lt;code&gt;person.getMiddleName() == null&lt;/code&gt;. If the target property for which the default assignment shall be done is not of type &lt;code&gt;String&lt;/code&gt;, the usual type conversion / type mapping mechanism is applied.&lt;/p&gt;

&lt;h3 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;

&lt;p&gt;With CR2 out, we want to release MapStruct 1.0 Final as soon as possible. We won&amp;rsquo;t add any new features or large refactorings for 1.0 and will allow only bugfixes. Based on the number of bugs reported against CR2, we should be ready to build the Final within the next couple of weeks.&lt;/p&gt;

&lt;p&gt;In the mean time, you&amp;rsquo;re invited to try out the MapStruct &lt;a href=&#34;https://github.com/mapstruct/mapstruct-eclipse&#34;&gt;Eclipse plug-in&lt;/a&gt;. Although it&amp;rsquo;s in an early stage, it already contains some handy content-assists (e.g. for &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt; property names in the &lt;code&gt;@Mapping&lt;/code&gt; annotation) and quick-fixes for some common mapping errors detected by MapStruct.&lt;/p&gt;

&lt;p&gt;Any feedback is welcome, just post a comment below or get in touch through the following channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get help at the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group&lt;/li&gt;
&lt;li&gt;Report bugs and feature requests via the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/GetMapStruct&#34;&gt;@GetMapStruct&lt;/a&gt; on Twitter&lt;/li&gt;
&lt;li&gt;Follow MapStruct on &lt;a href=&#34;https://plus.google.com/u/0/118070742567787866481/posts&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MapStruct 1.0.0.CR1 has landed</title>
      <link>http://mapstruct.org/news/2015-06-11-mapstruct-1_0_0_CR1-has-landed/</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2015-06-11-mapstruct-1_0_0_CR1-has-landed/</guid>
      <description>

&lt;p&gt;I am very happy to announce the first candidate release of MapStruct 1.0!&lt;/p&gt;

&lt;p&gt;As we are approach MapStruct 1.0, this release is primarily focused on ironing out remaining glitches and fixing bugs. But there are also some new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A new SPI for discovering property accessors not adhering to the JavaBeans convention&lt;/li&gt;
&lt;li&gt;The decorator feature can now also be used with Spring&lt;/li&gt;
&lt;li&gt;Support for before- and after-mapping lifecycle hooks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The complete list of 24 closed issues can be found in the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?q=milestone%3A1.0.0.CR1&#34;&gt;change log&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A big thank you to everyone contributing to this release: &lt;a href=&#34;https://github.com/sjaakd/&#34;&gt;Sjaak Derksen&lt;/a&gt;, &lt;a href=&#34;https://github.com/agudian&#34;&gt;Andreas Gudian&lt;/a&gt;, &lt;a href=&#34;https://github.com/chschu&#34;&gt;Christian Schuster&lt;/a&gt;, &lt;a href=&#34;https://github.com/ps-powa&#34;&gt;Paul Strugnell&lt;/a&gt; and &lt;a href=&#34;https://github.com/sonata82&#34;&gt;Remko Plantenga&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&#34;download&#34;&gt;Download&lt;/h3&gt;

&lt;p&gt;To fetch MapStruct 1.0.0.CR1 via Maven, Gradle or similar dependency management tools, use the following GAV coordinates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct|1.0.0.CR1|jar&#34;&gt;org.mapstruct:mapstruct:1.0.0.CR1&lt;/a&gt; for the annotation JAR (to be used with Java &amp;lt;= 7) or &lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-jdk8|1.0.0.CR1|jar&#34;&gt;org.mapstruct:mapstruct-jdk8:1.0.0.CR1&lt;/a&gt; (for usage with Java &amp;gt;= 8)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails|org.mapstruct|mapstruct-processor|1.0.0.CR1|jar&#34;&gt;org.mapstruct:mapstruct-processor:1.0.0.CR1&lt;/a&gt; for the annotation processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, you can download distribution bundles (ZIP, TAR.GZ) from &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.0.0.CR1/&#34;&gt;SourceForge&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;spi-for-property-accessor-discovery&#34;&gt;SPI for property accessor discovery&lt;/h3&gt;

&lt;p&gt;By default, MapStruct expects property getters and setters adhering to the &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html&#34;&gt;JavaBeans specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In some cases though models to be mapped derive from this convention. E.g. builder objects could expose property write accessors such as &lt;code&gt;withName()&lt;/code&gt; (instead of &lt;code&gt;setName()&lt;/code&gt;). O domain models could expose property read accessors just in the form of &lt;code&gt;name()&lt;/code&gt; (instead of &lt;code&gt;getName()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To make MapStruct work with such models, there is now an SPI (service provider interface) which makes the discovery of property accessors customizable. This SPI comes in the form of the following contract:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
public interface AccessorNamingStrategy {

    /* MethodType may be GETTER, SETTER, ADDER or OTHER */
    MethodType getMethodType(ExecutableElement method);

    String getPropertyName(ExecutableElement getterOrSetterMethod);

    String getElementName(ExecutableElement adderMethod);

    String getCollectionGetterName(String property);
}
&lt;/pre&gt;

&lt;p&gt;The MapStruct engine will pass all candidate methods of mapping source and target types to this SPI in order to detect their property accessors. Once you have created an implementation of the contract based on your project&amp;rsquo;s specific property naming conventions (&lt;a href=&#34;https://github.com/mapstruct/mapstruct/blob/master/integrationtest/src/test/resources/namingStrategyTest/strategy/src/main/java/org/mapstruct/itest/naming/CustomAccessorNamingStrategy.java&#34;&gt;an example&lt;/a&gt; can be found in our test suite), it needs to be registered through the Java &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/index.html?java/util/ServiceLoader.html&#34;&gt;service loader&lt;/a&gt; mechanism. To do so, create the file &lt;em&gt;META-INF/services/org.mapstruct.ap.spi.AccessorNamingStrategy&lt;/em&gt; with the fully-qualified name of your implementation as contents:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
com.example.CustomAccessorNamingStrategy
&lt;/pre&gt;

&lt;p&gt;Note that in order to have MapStruct find your custom strategy, it must be added as dependency either to the project class path or to the factory path of the compilation.&lt;/p&gt;

&lt;h3 id=&#34;improved-decorator-support&#34;&gt;Improved decorator support&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://mapstruct.org/documentation/#section-decorators&#34;&gt;Mapper decorators&lt;/a&gt; have been supported for the default component model since Beta1. As of CR1, they can be used now with the Spring component model, too (CDI has its own notion of decorators which can be used just as is with MapStruct mappers). To enable a decorator, add it via &lt;code&gt;@DecoratedWith&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper(componentModel = &#34;spring&#34;)
@DecoratedWith( OrderMappingDecorator.class )
public interface OrderMapper {

    OrderDto orderToDto(Order order);
}
&lt;/pre&gt;

&lt;p&gt;The decorator is simply another Spring bean which implements the decorated type. It can have the generated mapper implementation injected using the &amp;ldquo;delegate&amp;rdquo; qualifier:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Component
@Primary
public class OrderMappingDecorator implements OrderMapper {

    @Autowired
    @Qualifier( &#34;delegate&#34; )
    private OrderMapper delegate;

    public OrderMappingDecorator() {
    }

    @Override
    public OrderDto orderToDto(Order order) {
        OrderDto dto = delegate.orderToDto( order );

        // apply some additional custom mapping routine...

        return dto;
    }
}
&lt;/pre&gt;

&lt;p&gt;By adding the &lt;code&gt;@Primary&lt;/code&gt; annotation to the decorator it is ensured that the decorated mapper can be obtained through dependency injection without the need for further qualification at injection points.&lt;/p&gt;

&lt;h3 id=&#34;before-and-after-mapping-callbacks&#34;&gt;Before and after mapping callbacks&lt;/h3&gt;

&lt;p&gt;Somewhat related to decorators is the new feature of before and after mapping &lt;a href=&#34;http://mapstruct.org/documentation#section-before-after&#34;&gt;callback methods&lt;/a&gt;. They are useful to implement generic before and after mapping logic for a wider range of source and target types. Whereas decorators are bound to a specific mapper contract, before and after mapping callbacks are bound to arbitrary source and target types.&lt;/p&gt;

&lt;p&gt;The following gives an example:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper
public abstract class VehicleMapper {

    @BeforeMapping
    protected void flushEntity(AbstractVehicle vehicle) {
        // e.g. call EntityManager flush() to make sure the entity
        // is populated with the right @Version before mapping it into the DTO
    }

    @AfterMapping
    protected void fillTank(AbstractVehicle vehicle, @MappingTarget AbstractVehicleDto result) {
        result.fuelUp( new Fuel( vehicle.getTankCapacity(), vehicle.getFuelType() ) );
    }

    public abstract CarDto toCarDto(Car car);
}
&lt;/pre&gt;

&lt;p&gt;All generated implementations of mapping methods with &lt;code&gt;AbstractVehicle&lt;/code&gt; or a sub-type as source-type (such as &lt;code&gt;toCarDto()&lt;/code&gt;) will invoke the method annotated with &lt;code&gt;@BeforeMapping&lt;/code&gt; at the beginning. Similarly, all methods mapping &lt;code&gt;AbstractVehicle&lt;/code&gt; or a sub-type into &lt;code&gt;AbstractVehicleDto&lt;/code&gt; or a sub-type will invoke the method annotated with &lt;code&gt;@AfterMapping&lt;/code&gt; at the end.&lt;/p&gt;

&lt;p&gt;Before and after mapping callback methods are a quite powerful mechanism to implement cross-cutting concerns common to a larger group of mapping methods. Refer to the JavaDocs of &lt;code&gt;@BeforeMapping&lt;/code&gt; and &lt;code&gt;@AfterMapping&lt;/code&gt; to learn more, e.g. about ordering of several lifecycle methods etc. Note that before and after mapping callback methods are considered and experimental features as of MapStruct 1.0. Based on feedback from using this feature in practice we may fine-tune semantics in a subsequent release.&lt;/p&gt;

&lt;h3 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;

&lt;p&gt;With CR 1 out, MapStruct 1.0 Final is getting in sight! Based on the number of bugs reported against CR1, we may either do another CR in two or three weeks or go straight to the Final. In parallel work on the MapStruct &lt;a href=&#34;https://github.com/mapstruct/mapstruct-eclipse&#34;&gt;Eclipse plug-in&lt;/a&gt; continues. We plan to do a first Alpha release of that very soon. Stay tuned!&lt;/p&gt;

&lt;p&gt;Finally, some useful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get help at the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group&lt;/li&gt;
&lt;li&gt;Report bugs and feature requests via the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/GetMapStruct&#34;&gt;@GetMapStruct&lt;/a&gt; on Twitter&lt;/li&gt;
&lt;li&gt;Follow MapStruct on &lt;a href=&#34;https://plus.google.com/u/0/118070742567787866481/posts&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Array mappings, configuration inheritance: MapStruct 1.0.0.Beta4 released</title>
      <link>http://mapstruct.org/news/2015-03-05-arrays-configuration-inheritance-mapstruct-1_0_0_Beta4/</link>
      <pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2015-03-05-arrays-configuration-inheritance-mapstruct-1_0_0_Beta4/</guid>
      <description>

&lt;p&gt;The MapStruct community proudly announces the release of MapStruct 1.0.0.Beta4!&lt;/p&gt;

&lt;p&gt;The new release provides support for mapping arrays of Java beans, re-use of mapping configurations via a brand-new inheritance mechanism and ordered setter invocations on the target side. We also fixed quite a few bugs. You can find the complete list of 48 issues in the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?q=milestone%3A1.0.0.Beta4&#34;&gt;change log&lt;/a&gt;. When upgrading from a previous Beta release, please check out the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/wiki/Migration-notes&#34;&gt;migration notes&lt;/a&gt; for changes which may affect existing applications.&lt;/p&gt;

&lt;p&gt;One thing I&amp;rsquo;m especially excited about is the new MapStruct Eclipse plug-in which will give you an even better experience when using MapStruct within the Eclipse IDE. You&amp;rsquo;ll find out more below.&lt;/p&gt;

&lt;p&gt;This release has been a true team effort; Many, many thanks to &lt;a href=&#34;https://github.com/sjaakd/&#34;&gt;Sjaak Derksen&lt;/a&gt;, &lt;a href=&#34;https://github.com/agudian&#34;&gt;Andreas Gudian&lt;/a&gt;, &lt;a href=&#34;https://github.com/timoe&#34;&gt;Timo Eckhardt&lt;/a&gt;, &lt;a href=&#34;https://github.com/eforest&#34;&gt;Ewald Volkert&lt;/a&gt;, &lt;a href=&#34;https://github.com/chschu&#34;&gt;Christian Schuster&lt;/a&gt;, &lt;a href=&#34;https://github.com/shasait&#34;&gt;Sebastian Hasait&lt;/a&gt; and &lt;a href=&#34;https://github.com/dilipkrish&#34;&gt;Dilip Krishnan&lt;/a&gt; who all worked on the Beta4 release.&lt;/p&gt;

&lt;h3 id=&#34;array-mappings&#34;&gt;Array mappings&lt;/h3&gt;

&lt;p&gt;While MapStruct has had support for mapping collections (&lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt; etc.) of primitive and Java bean types for a long time, this was not the case for arrays. This is finally possible, so you can now declare mapping methods such as the following:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper
public interface CustomerMapper {

    CustomerDto[] customersToDtos(Customer[] customers);

    CustomerDto customerToDto(Customer customer);
}
&lt;/pre&gt;

&lt;p&gt;As known from collection mapping methods, the generated &lt;code&gt;customersToDtos()&lt;/code&gt; implementation will invoke the &lt;code&gt;customerToDto()&lt;/code&gt; method for mapping the individual array elements. Similar to collection mapping methods, you can use the &lt;code&gt;@IterableMapping&lt;/code&gt; annotation for applying specific configuration options:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@IterableMapping(dateFormat = &#34;dd.MM.yyyy&#34;)
String[] dateArrayToStringArray(Date[] dates);
&lt;/pre&gt;

&lt;p&gt;If needed, you also can map between collections and arrays:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
CustomerDto[] customersToDtos(List&amp;lt;Customer&amp;gt; customers);
&lt;/pre&gt;

&lt;h3 id=&#34;configuration-inheritance&#34;&gt;Configuration inheritance&lt;/h3&gt;

&lt;p&gt;With help of the new &lt;code&gt;@InheritConfiguration&lt;/code&gt; annotation you can advice MapStruct to apply the configuration from one mapping method to another.&lt;/p&gt;

&lt;p&gt;This comes in handy for instance when having a &amp;ldquo;normal&amp;rdquo; mapping method and an update method for the same types. Instead of configuring both methods individually, you can let one method inherit the configuration from the other:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapping(target=&#34;lastName&#34;, source=&#34;surName&#34;)
@Mapping(target=&#34;accountNumber&#34;, source=&#34;customerNumber&#34;)
Customer customerDtoToCustomer(CustomerDto customerDto);

@InheritConfiguration
void updateCustomerFromDto(CustomerDto dto, @MappingTarget customer);
&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;@InheritConfiguration&lt;/code&gt; annotation will let the &lt;code&gt;updateCustomerFromDto()&lt;/code&gt; inherit all the mappings from &lt;code&gt;customerDtoToCustomer()&lt;/code&gt;. The selection of the template method is done by matching source and target types, but you could explicitly specify a method as configuration source if needed.&lt;/p&gt;

&lt;p&gt;Configuration inheritance is particularly useful when working with complex type hierarchies. You can define a configuration for the base types of the source and target models and let specific mapping methods inherit this configuration. But what if a base type is abstract? Naturally, MapStruct cannot generate an implementation of a method whose return type is an abstract one.&lt;/p&gt;

&lt;p&gt;This can be resolved by declaring a &amp;ldquo;prototype method&amp;rdquo; within a &lt;a href=&#34;http://mapstruct.org/documentation/#section-shared-config&#34;&gt;configuration class&lt;/a&gt; referenced by the mapper:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper(config=BaseMappings.class)
public interface CustomerMapper {

    @InheritConfiguration(name=&#34;anyDtoToEntity&#34;)
    CustomerDto customerToDto(Customer customer);
}
&lt;/pre&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@MapperConfig
public interface BaseMappings {

    // no implementation will be generated, it only serves as configuration source
    @Mapping(target = &#34;primaryKey&#34;, source = &#34;id&#34;)
    BaseDto anyEntityToDto(BaseEntity entity);
}
&lt;/pre&gt;

&lt;p&gt;Methods declared within configuration classes such as &lt;code&gt;BaseMappings&lt;/code&gt; are not usable as mapping methods themselves (no implementation will be generated for them). They solely serve as configuration source. In the example the &lt;code&gt;customerToDto()&lt;/code&gt; method would inherit the configuration given at &lt;code&gt;anyEntityToDto()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that you optionally can have prototype configurations automatically be applied to methods with compatbile source and target types. You can find the details in the &lt;a href=&#34;http://mapstruct.org/documentation/#section-inherit-config&#34;&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;ordered-setter-invocations&#34;&gt;Ordered setter invocations&lt;/h3&gt;

&lt;p&gt;Sometimes it is required to invoke the setters of the target bean in a specific order, e.g. if one setter depends on the value of other properties of the same bean. For that purpose there is a new attribute on the &lt;code&gt;@Mapping&lt;/code&gt; annotation, &lt;code&gt;dependsOn()&lt;/code&gt;. The following shows an example:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapping(target = &#34;givenName&#34;, source = &#34;firstName&#34;)
@Mapping(target = &#34;middleName&#34;, dependsOn = &#34;givenName&#34;)
@Mapping(target = &#34;lastName&#34;, dependsOn = &#34;middleName&#34;)
AddressDto addressToDto(Address address);
&lt;/pre&gt;

&lt;p&gt;This configuration makes sure that the generated implementation of &lt;code&gt;addressToDto()&lt;/code&gt; first calls &lt;code&gt;setGivenName()&lt;/code&gt;, then &lt;code&gt;setMiddleName()&lt;/code&gt; and finally &lt;code&gt;setLastName()&lt;/code&gt;. A single property can also depend on several other ones:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapping(target = &#34;lastName&#34;, dependsOn = { &#34;firstName&#34;, &#34;middleName&#34;})
AddressDto addressToDto(Address address);
&lt;/pre&gt;

&lt;p&gt;This would ensure that &lt;code&gt;setLastName()&lt;/code&gt; is invoked after &lt;code&gt;setGivenName()&lt;/code&gt; and &lt;code&gt;setMiddleName()&lt;/code&gt;, but no guarantee is given for the order of these two.&lt;/p&gt;

&lt;h3 id=&#34;mapstruct-eclipse-plug-in&#34;&gt;MapStruct Eclipse plug-in&lt;/h3&gt;

&lt;p&gt;Being a JSR 269 annotation processor, MapStruct is meant to run equally well within command line builds (plain javac, Mavent etc.) as well as IDEs. Indeed the annotation processor works nicely for instance in Eclipse, generating mappers upon save, showing error markers next to the affected elements etc.&lt;/p&gt;

&lt;p&gt;Still there are some advanced features which cannot be provided by an annotation processor, e.g. auto-completion for annotation attributes, refactoring support, navigation to referenced elements and more. This is where the &lt;a href=&#34;https://github.com/mapstruct/mapstruct-eclipse/&#34;&gt;MapStruct Eclipse plug-in&lt;/a&gt; comes in.&lt;/p&gt;

&lt;p&gt;Developed by my good friend &lt;a href=&#34;https://github.com/larswetzer&#34;&gt;Lars Wetzer&lt;/a&gt;, it aims at providing an even better experience when using MapStruct within Eclipse. The plug-in is still at a very early stage, currently it provides auto-completion for &lt;code&gt;@Mapping#source()&lt;/code&gt; and &lt;code&gt;target()&lt;/code&gt;. The following shows a screenshot:&lt;/p&gt;

&lt;div style=&#34;text-align:center&#34;&gt;
    &lt;img src=&#34;http://mapstruct.org/images/mapstruct-eclipse-plugin.png&#34; style=&#34;padding-bottom: 3px;&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;More functionality will be coming soon. You can find the list of features planned for the plug-in &lt;a href=&#34;https://github.com/mapstruct/mapstruct-eclipse/issues&#34;&gt;here&lt;/a&gt;. There is no official release of the plug-in yet. But if you feel adventurous, you can install the latest nightly build from the &lt;a href=&#34;https://mapstruct.ci.cloudbees.com/job/mapstruct-eclipse/lastSuccessfulBuild/artifact/org.mapstruct.eclipse.repository/target/repository/&#34;&gt;update site&lt;/a&gt; at our CI server.&lt;/p&gt;

&lt;h3 id=&#34;download&#34;&gt;Download&lt;/h3&gt;

&lt;p&gt;If you work with Maven, Gradle or another dependency management tool, use the following GAV coordinates to obtain the MapStruct artifacts from Maven Central:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct&amp;amp;#124;1.0.0.Beta4&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct:1.0.0.Beta4&lt;/a&gt; for the annotation JAR (to be used with Java &amp;lt;= 7) or &lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct-jdk8&amp;amp;#124;1.0.0.Beta4&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct-jdk8:1.0.0.Beta4&lt;/a&gt; (for usage with Java &amp;gt;= 8)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct-processor&amp;amp;#124;1.0.0.Beta4&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct-processor:1.0.0.Beta4&lt;/a&gt; for the annotation processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, you can download distribution bundles (ZIP, TAR.GZ) from &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.0.0.Beta4/&#34;&gt;SourceForge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Beta4 contains almost all the features we envisioned for the 1.0 release. We&amp;rsquo;ll now focus on bug-fixing and addressing some more minor edge cases. The CR1 (candidate release) should be out in four to six weeks from now, followed by 1.0 Final after four more weeks from there.&lt;/p&gt;

&lt;p&gt;Finally, some useful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get help at the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group&lt;/li&gt;
&lt;li&gt;Report bugs and feature requests via the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/GetMapStruct&#34;&gt;@GetMapStruct&lt;/a&gt; on Twitter&lt;/li&gt;
&lt;li&gt;Follow MapStruct on &lt;a href=&#34;https://plus.google.com/u/0/118070742567787866481/posts&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MapStruct 1.0.0.Beta3 is out with nested properties, qualifiers and more</title>
      <link>http://mapstruct.org/news/2014-11-30-mapstruct-1_0_0_Beta3-nested-properties/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2014-11-30-mapstruct-1_0_0_Beta3-nested-properties/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m delighted to announce the release of MapStruct 1.0.0.Beta3.&lt;/p&gt;

&lt;p&gt;This version brings the long awaited support for mapping nested source properties, built-in mappings for Java 8 date/time types, fine-grained selection of mapping methods via qualifiers and much more. You can find the complete list of a whopping 46 closed issues &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?page=2&amp;amp;q=milestone%3A1.0.0.Beta3+is%3Aclosed&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that existing applications using MapStruct need to adapt to some changes we had to do in order to iron out some glitches from the previous beta releases. These changes are described in more detail at the end of this post.&lt;/p&gt;

&lt;p&gt;Before diving into the details, let me say a huge thank you to &lt;a href=&#34;https://github.com/sjaakd/&#34;&gt;Sjaak Derksen&lt;/a&gt;, &lt;a href=&#34;https://github.com/agudian&#34;&gt;Andreas Gudian&lt;/a&gt;, &lt;a href=&#34;https://github.com/timoe&#34;&gt;Timo Eckhardt&lt;/a&gt; and &lt;a href=&#34;https://github.com/chschu&#34;&gt;Christian Schuster&lt;/a&gt;! Again you guys went far beyond what anyone could have hoped for; this release would not have been possible without you.&lt;/p&gt;

&lt;h3 id=&#34;mapping-nested-properties&#34;&gt;Mapping nested properties&lt;/h3&gt;

&lt;p&gt;One of the most wished-for features in MapStruct was to map attributes from nested elements of a source object (tree) into target objects. That&amp;rsquo;s finally possible now, using simple &amp;ldquo;dot paths&amp;rdquo;, just as you&amp;rsquo;d expect it:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper
public interface CustomerMapper {

    @Mapping(source = &#34;address.firstName&#34;, target = &#34;firstName&#34;)
    @Mapping(source = &#34;address.lastName&#34;, target = &#34;lastName&#34;)
    CustomerDto customerToDto(Customer customer);
}
&lt;/pre&gt;

&lt;p&gt;This mapping method will map the &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; attributes from the &lt;code&gt;Address&lt;/code&gt; object referenced by the mapped &lt;code&gt;Customer&lt;/code&gt; object to the &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; properties of the target object.&lt;/p&gt;

&lt;p&gt;Of course you also can refer to properties nested deeper in the hierarchy, e.g. &lt;code&gt;address.city.name&lt;/code&gt;. That&amp;rsquo;s a great way to flatten and select parts of complex hierarchies e.g. for view objects returned to a client.&lt;/p&gt;

&lt;h3 id=&#34;improved-built-in-mappings&#34;&gt;Improved built-in mappings&lt;/h3&gt;

&lt;p&gt;There is now built-in support for the Java 8 time and date types (JSR 310). That means properties of types such as &lt;code&gt;java.time.ZonedDateTime&lt;/code&gt; or &lt;code&gt;java.time.LocalDateTime&lt;/code&gt; will automatically be mapped to &lt;code&gt;String&lt;/code&gt;s as well as the legacy date types &lt;code&gt;java.util.Calendar&lt;/code&gt; and &lt;code&gt;java.util.Date&lt;/code&gt;. Also &lt;code&gt;java.util.Calendar&lt;/code&gt; will automatically mapped to &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;java.util.Date&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;http://mapstruct.org/documentation/#section-05&#34;&gt;documentation&lt;/a&gt; for the list of all built-in mappings.&lt;/p&gt;

&lt;p&gt;Another improvement relates to the mapping of collection-typed properties. Let&amp;rsquo;s assume the &lt;code&gt;Order&lt;/code&gt; class from the previous example had a &lt;code&gt;List&amp;lt;OrderLine&amp;gt;&lt;/code&gt; which should be mapped to a list of DTOs in the target object. So far you would have been required to declare a method such as the following on the mapper interface:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
List&amp;lt;OrderLineDto&amp;gt; orderLinesToOrderLineDtos(Iterable&amp;lt;OrderLine&amp;gt; orderLines);
&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s not necessary any longer, it will now be added automatically as a private method to the generated mapper class if required.&lt;/p&gt;

&lt;h3 id=&#34;qualifiers&#34;&gt;Qualifiers&lt;/h3&gt;

&lt;p&gt;Qualifiers provide a way to resolve ambiguities in case several mapping methods are suitable to map a given bean property. E.g. let&amp;rsquo;s assume you&amp;rsquo;d have two methods for mapping &lt;code&gt;Date&lt;/code&gt;s into &lt;code&gt;String&lt;/code&gt;s in a manually implemented mapper class:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
public class DateMapper {

    // returns e.g. 2014-30-11
    String dateToString(Date date) { ... }

    // returns e.g. 2014-30-11 18:16
    String dateToStringWithTime(Date date) { ... }
}
&lt;/pre&gt;

&lt;p&gt;That mapper is used by MapStruct-generated mapper:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper(uses=DateMapper.class)
public class OrderMapper {

    // Order#date of type Date, OrderDto#date of type String
    OrderDto orderToOrderDto(Order order);
}
&lt;/pre&gt;

&lt;p&gt;In previous releases you&amp;rsquo;d have gotten an error during generation, as both methods from &lt;code&gt;DateMapper&lt;/code&gt; are suitable to map the &lt;code&gt;date&lt;/code&gt; property. You can now use qualifiers to resolve that ambiguity and specify which method should be used. To do so, define a simple qualifier annotation type:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Qualifier
@Target(ElementType.METHOD)
public @interface ShortDate {}
&lt;/pre&gt;

&lt;p&gt;Tag mapping methods using such qualifiers like so:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
public class DateMapper {

    @ShortDate
    String dateToString(Date date) { ... }

    @LongDate
    String dateToStringWithTime(Date date) { ... }
}
&lt;/pre&gt;

&lt;p&gt;And specify a qualifier via &lt;code&gt;@Mapping&lt;/code&gt; for the concerned property:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper(uses=DateMapper.class)
public class OrderMapper {

    @Mapping(target=&#34;date&#34;, qualifiedBy = ShortDate.class)
    OrderDto orderToOrderDto(Order order);
}
&lt;/pre&gt;

&lt;p&gt;This will make sure that the &lt;code&gt;dateToString()&lt;/code&gt; method will be invoked to map the order date property. If required, you also could specify several qualifiers via &lt;code&gt;qualifiedBy()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;migration-notes&#34;&gt;Migration notes&lt;/h3&gt;

&lt;p&gt;For the sake of increased consistency and better usability, we had to do some changes which may require existing applications which already use MapStruct to be adapted. Most prominently, &lt;a href=&#34;http://mapstruct.org/documentation/#section-10&#34;&gt;reverse mapping methods&lt;/a&gt; must now be explicitly marked as such using the new &lt;code&gt;@InheritInverseConfiguration&lt;/code&gt; annotation:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper(uses=DateMapper.class)
public class OrderMapper {

    OrderDto orderToOrderDto(Order order);

    @InheritInverseConfiguration
    Order orderDtoToOrder(OrderDto order);
}
&lt;/pre&gt;

&lt;p&gt;That annotation makes it explicit which one is the reverse mapping method and thus should inherit the configuration from its counterpart. You still can add further mappings to the reverse method in order to amend or override the inherited mappings. &lt;code&gt;@InheritInverseConfiguration&lt;/code&gt; can also be used to specify the name of the method to inherit from in case several methods qualify as per their source and target types.&lt;/p&gt;

&lt;p&gt;Another change affects the existing &lt;a href=&#34;http://localhost:9009/documentation/#section-02-01&#34;&gt;processor options&lt;/a&gt;. In order to avoid conflicts with other annotation processors, these options must now be given using the &amp;ldquo;mapstruct.&amp;rdquo; prefix, e.g. &amp;ldquo;mapstruct.suppressGeneratorTimestamp&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;We have created a &lt;a href=&#34;https://github.com/mapstruct/mapstruct/wiki/Migration-notes&#34;&gt;wiki page&lt;/a&gt; where we&amp;rsquo;ll collect all incompatible changes for future releases. Of course we&amp;rsquo;ll try hard to avoid this sort of changes whenever possible.&lt;/p&gt;

&lt;h3 id=&#34;how-do-i-get-it&#34;&gt;How do I get it?&lt;/h3&gt;

&lt;p&gt;You can fetch distribution bundles (ZIP, TAR.GZ) from &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.0.0.Beta3/&#34;&gt;SourceForge&lt;/a&gt;. Alternatively, you can obtain the dependencies from Maven Central. The GAV coordinates are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct&amp;amp;#124;1.0.0.Beta3&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct:1.0.0.Beta3&lt;/a&gt; for the annotation JAR (to be used with Java &amp;lt;= 7) or &lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct-jdk8&amp;amp;#124;1.0.0.Beta3&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct-jdk8:1.0.0.Beta3&lt;/a&gt; (for usage with Java &amp;gt;= 8)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct-processor&amp;amp;#124;1.0.0.Beta3&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct-processor:1.0.0.Beta3&lt;/a&gt; for the annotation processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Beta3 release is planned to be the last beta, next will be CR1 (candidate release).&lt;/p&gt;

&lt;p&gt;Anything you&amp;rsquo;d like to propose for inclusion in the 1.0 Final release? Then let us know by commenting below or posting to the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group. Bugs and feature requests can be reported in the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt;. And if you&amp;rsquo;d like to hack on MapStruct yourself, check out the &lt;a href=&#34;http://mapstruct.org/contributing&#34;&gt;development guide&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Support for Java 8, JodaTime and more: MapStruct 1.0.0.Beta2 released</title>
      <link>http://mapstruct.org/news/2014-07-02-Java_8_support_in_mapstruct-1_0_0_Beta2/</link>
      <pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2014-07-02-Java_8_support_in_mapstruct-1_0_0_Beta2/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s my great pleasure to announce the release of MapStruct 1.0.0.Beta2.&lt;/p&gt;

&lt;p&gt;Amongst the new features is initial support for Java 8, built-in mappings for the types of the &lt;a href=&#34;http://www.joda.org/joda-time/&#34;&gt;Joda-Time&lt;/a&gt; date and time API, flexible mapping customization via inline Java expressions and much more.&lt;/p&gt;

&lt;p&gt;Distribution bundles (ZIP, TAR.GZ) are available on &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.0.0.Beta2/&#34;&gt;SourceForge&lt;/a&gt;. Alternatively, you can obtain the dependencies from Maven Central. The GAV coordinates are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct&amp;amp;#124;1.0.0.Beta2&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct:1.0.0.Beta2&lt;/a&gt; for the annotation JAR, to be used with Java &amp;lt;= 7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct-jdk8&amp;amp;#124;1.0.0.Beta2&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct-jdk8:1.0.0.Beta2&lt;/a&gt; for the annotation JAR, to be used with Java &amp;gt;= 8&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct-processor&amp;amp;#124;1.0.0.Beta2&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct-processor:1.0.0.Beta2&lt;/a&gt; for the annotation processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;java-8&#34;&gt;Java 8&lt;/h3&gt;

&lt;p&gt;MapStruct now leverages the &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/annotations/repeating.html&#34;&gt;repeating annotation&lt;/a&gt; feature introduced with Java 8. This allows to specify several &lt;code&gt;@Mapping&lt;/code&gt; annotations on one and the same method in a very concise way:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper
public interface AnimalMapper {
    
    @Mapping(source = &#34;weightInPounds&#34;, target = &#34;weight&#34;)
    @Mapping(source = &#34;heightInCentimetres&#34;, target = &#34;height&#34;)
    AnimalDto animalToAnimalDto(Animal animal);
}
&lt;/pre&gt;

&lt;p&gt;To make use of this feature be sure to include the right version of the annotation JAR (&lt;em&gt;org.mapstruct:mapstruct-jdk8:1.0.0.Beta2&lt;/em&gt;), as only this version allows to specify several &lt;code&gt;@Mapping&lt;/code&gt; annotations without wrapping them in &lt;code&gt;@Mappings&lt;/code&gt; (apart from this, both versions of the annotation JAR are exactly the same).&lt;/p&gt;

&lt;h3 id=&#34;joda-time-support&#34;&gt;Joda-Time support&lt;/h3&gt;

&lt;p&gt;When using the Joda-Time API in your project you&amp;rsquo;ll be glad to hear that MapStruct supports mappings of the Joda types now. More specifically, mappings between the following types are provided out-of-the-box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.joda.time.DateTime&lt;/code&gt;, &lt;code&gt;org.joda.time.LocalDateTime&lt;/code&gt; and &lt;code&gt;org.joda.time.LocalDate&lt;/code&gt; &amp;lt;&amp;gt; &lt;code&gt;java.util.Date&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.joda.time.DateTime&lt;/code&gt; &amp;lt;&amp;gt; &lt;code&gt;java.util.Calendar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.joda.time.DateTime&lt;/code&gt;, &lt;code&gt;org.joda.time.LocalDateTime&lt;/code&gt;, &lt;code&gt;org.joda.time.LocalDate&lt;/code&gt; and &lt;code&gt;org.joda.time.LocalTime&lt;/code&gt; &amp;lt;&amp;gt; &lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use these types in your mapped models, MapStruct will automatically generated the required mapping routines without any further configuration. &lt;code&gt;@Mapping#dateFormat()&lt;/code&gt; can be used when converting from or to &lt;code&gt;String&lt;/code&gt; to specify the expected date format.&lt;/p&gt;

&lt;p&gt;Note that for the following release &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues/121&#34;&gt;we plan&lt;/a&gt; to also cover the new Java 8 time and date types which will be useful when mapping between models using the old types such as &lt;code&gt;java.util.Date&lt;/code&gt; and the new ones.&lt;/p&gt;

&lt;h3 id=&#34;constants-and-inline-java-expressions&#34;&gt;Constants and inline Java expressions&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;@Mapping&lt;/code&gt; annotation has been enriched with several new useful attributes. Via &lt;code&gt;constant()&lt;/code&gt; you can set an attribute in the target object of a mapping to a fixed value:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapping(target = &#34;weightUnit&#34;, constant=&#34;cm&#34;)
AnimalDto animalToAnimalDto(Animal animal);
&lt;/pre&gt;

&lt;p&gt;If the specified target property is not a String, the given value will be converted by applying one of the available conversions described in the &lt;a href=&#34;http://mapstruct.org/documentation/#section-05&#34;&gt;reference documentation&lt;/a&gt;. That way you can e.g. specify constants for numeric or date attributes (optionally applying a given date format).&lt;/p&gt;

&lt;p&gt;Sometimes it is not sufficient to map a single source property to a corresponding target property, but more flexible mappings are required. For such cases it is now possible to specify custom mapping expressions via the &lt;code&gt;expression()&lt;/code&gt; attribute. The following shows an example:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapping(target = &#34;fullName&#34;, expression = &#34;java(visitor.getFirstName() + \&#34; \&#34; + visitor.getLastName())&#34;)
VisitorDto visitorToVisitorDto(Visitor visitor);
&lt;/pre&gt;

&lt;p&gt;Here a Java expression in the form &lt;code&gt;java(&amp;lt;EXPRESSION&amp;gt;)&lt;/code&gt;is used to set an attribute in the target object based on the value of two properties from the source object. The given expression is transferred as is into the generated mapping method, so you&amp;rsquo;ll get feedback about the correctness of the expression during compilation.&lt;/p&gt;

&lt;p&gt;While &lt;a href=&#34;http://mapstruct.org/documentation/#section-05-03&#34;&gt;custom mappers&lt;/a&gt; and &lt;a href=&#34;http://mapstruct.org/documentation/#section-09&#34;&gt;decorators&lt;/a&gt; should still be the preferred way for implementing more complex custom mappings, such inline expressions are a very useful utility in many cases. E.g. you also could invoke a constructor to instantiate a specific property type.&lt;/p&gt;

&lt;p&gt;Besides Java-based expressions &lt;a href=&#34;(https://github.com/mapstruct/mapstruct/issues/244)&#34;&gt;we plan&lt;/a&gt; to support a more concise expression language in a future release. E.g. the mapping from the previous example could be declared as follows using the &lt;a href=&#34;https://jcp.org/en/jsr/detail?id=341&#34;&gt;Unified Expression Language&lt;/a&gt;:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapping(target = &#34;fullName&#34;, expression = &#34;uel(visitor.firstName + &#39; &#39; + visitor.lastName)&#34;)
VisitorDto visitorToVisitorDto(Visitor visitor);
&lt;/pre&gt;

&lt;p&gt;The idea here is to translate the given EL expression at generation time into a corresponding Java fragment. This would allow to leverage the expressive power of expression languages without adding any runtime dependencies to the generated code. At this point, this is just a vague idea, so any input or help with such feature is highly welcome.&lt;/p&gt;

&lt;h3 id=&#34;sharing-mapper-configurations&#34;&gt;Sharing mapper configurations&lt;/h3&gt;

&lt;p&gt;In larger projects it can be useful to share the same configuration between several mapper classes, e.g. for the component model to be used (CDI, Spring, etc.). That&amp;rsquo;s now possible via the &lt;code&gt;@MapperConfig&lt;/code&gt; annotation. This annotation can be given on a central configuration class and defines a template for the different mapping settings:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@MapperConfig(
    uses = { DateMapper.class, UnitsOfMeasurementMapper.class },
    unmappedTargetPolicy = ReportingPolicy.ERROR,
    componentModel = &#34;cdi&#34;
)
public class MapperConfiguration {}
&lt;/pre&gt;
    

&lt;p&gt;Specific mappers can then refer to this configuration source, thus inheriting its settings while allowing to override single settings if required:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper()
    config = MapperConfiguration.class,
    unmappedTargetPolicy = ReportingPolicy.IGNORE
)
public class AnimalMapper {}
&lt;/pre&gt;

&lt;h3 id=&#34;what-else-is-in-it&#34;&gt;What else is in it?&lt;/h3&gt;

&lt;p&gt;Other useful features in the Beta2 release include support for &amp;ldquo;adder methods&amp;rdquo; (see &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues/207&#34;&gt;issues #207&lt;/a&gt;) and the possibility to ignore specific properties during the mapping (see &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues/72&#34;&gt;issue #72&lt;/a&gt;). In addition quite a few bugs have been fixed; Check out the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?milestone=4&amp;amp;state=closed&#34;&gt;change log&lt;/a&gt; for a complete list of all issues.&lt;/p&gt;

&lt;p&gt;Your feedback is more than welcome, just add a comment below or join the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group. Bugs and feature requests can be reported in the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt;. If you&amp;rsquo;d like to hack on MapStruct yourself, check out the &lt;a href=&#34;http://mapstruct.org/contributing&#34;&gt;development guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, I&amp;rsquo;d like to say a massive thank you to &lt;a href=&#34;https://github.com/sjaakd/&#34;&gt;Sjaak Derksen&lt;/a&gt;, &lt;a href=&#34;https://github.com/agudian&#34;&gt;Andreas Gudian&lt;/a&gt;, &lt;a href=&#34;https://github.com/timoe&#34;&gt;Timo Eckhardt&lt;/a&gt; and &lt;a href=&#34;https://github.com/chschu&#34;&gt;Christian Schuster&lt;/a&gt; who all put huge efforts into this release. You guys rock!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MapStruct 1.0.0.Beta1 is out with JAXB support, custom factories, decorators and more</title>
      <link>http://mapstruct.org/news/2014-03-05-mapstruct-1_0_0_Beta1-with-JAXB-support-factories-decorators-and-more/</link>
      <pubDate>Wed, 05 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2014-03-05-mapstruct-1_0_0_Beta1-with-JAXB-support-factories-decorators-and-more/</guid>
      <description>

&lt;p&gt;The MapStruct team is very happy to announce the release of MapStruct 1.0.0.Beta1.&lt;/p&gt;

&lt;p&gt;One core part of the new release is comprehensive support for mapping JAXB types with &lt;code&gt;JAXBElement&lt;/code&gt; and &lt;code&gt;XmlGregorianCalendar&lt;/code&gt; attributes. It&amp;rsquo;s possible now to plug in custom factories for creating objects, which also supports the JAXB use case as we&amp;rsquo;ll see in a minute. Further new features are the support for creating mappers from abstract classes (instead of interfaces) and decorators for customizing the behavior of mapping methods.&lt;/p&gt;

&lt;p&gt;The JARs should be synched to Maven Central soon. The coordinates are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct&amp;amp;#124;1.0.0.Beta1&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct:1.0.0.Beta1&lt;/a&gt; for the annotation JAR and&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct-processor&amp;amp;#124;1.0.0.Beta1&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct-processor:1.0.0.Beta1&lt;/a&gt; for the annotation processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively you can download a &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.0.0.Beta1/&#34;&gt;distribution bundle&lt;/a&gt; which contains everything required.&lt;/p&gt;

&lt;p&gt;Before diving into some of the new features, let me say a huge thank you to &lt;a href=&#34;https://github.com/sjaakd/&#34;&gt;Sjaak Derksen&lt;/a&gt; and &lt;a href=&#34;https://github.com/agudian&#34;&gt;Andreas Gudian&lt;/a&gt; who heavily contributed to this release. That&amp;rsquo;s much appreciated! Also a big thanks to everyone else who opened feature requests or joined the discussion.&lt;/p&gt;

&lt;h3 id=&#34;jaxb-support&#34;&gt;JAXB support&lt;/h3&gt;

&lt;p&gt;When working with SOAP or REST based web services it&amp;rsquo;s a common requirement to map between the internal model of the application an JAXB types used in the web service layer. MapStruct facilitates this use case by providing out-of-the-box support for the following type conversions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.util.Date&lt;/code&gt; &amp;lt;&amp;gt; &lt;code&gt;XMLGregorianCalendar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt; &amp;lt;&amp;gt; &lt;code&gt;XMLGregorianCalendar&lt;/code&gt;, optionally applying a format pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JAXBElement&amp;lt;T&amp;gt;&lt;/code&gt; &amp;lt;&amp;gt; &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;, e.g. &lt;code&gt;JAXBElement&amp;lt;Integer&amp;gt;&lt;/code&gt; &amp;lt;&amp;gt; &lt;code&gt;&amp;lt;Integer&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you generate JAXB types from an XML schema using &lt;a href=&#34;https://jaxb.java.net/2.2.4/docs/xjc.html&#34;&gt;xjc&lt;/a&gt;, you&amp;rsquo;ll typically obtain one or more &lt;code&gt;ObjectFactory&lt;/code&gt; classes with methods for instantiating &lt;code&gt;JAXBElement&lt;/code&gt;s. You can plug in these factories via the &lt;code&gt;uses()&lt;/code&gt; attribute of the &lt;code&gt;@Mapper&lt;/code&gt; annotation:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper(uses = ObjectFactory.class)
public interface OrderMapper {

    Order orderEntityToExternalOrder(OrderEntity orderEntity);
}
&lt;/pre&gt;

&lt;p&gt;Here, the generated implementation of the &lt;code&gt;orderEntityToExternalOrder()&lt;/code&gt; will invoke the corresponding methods of the factory class when populating the attributes of the target object. When selecting a method, MapStruct will also take the &lt;code&gt;@XmlElementDecl&lt;/code&gt; annotation and its &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;scope&lt;/code&gt; attributes into account. That way it is ensured that the resulting &lt;code&gt;JAXBElement&lt;/code&gt; attributes have the right QNAME.&lt;/p&gt;

&lt;h3 id=&#34;custom-object-factories-and-generic-mapping-methods&#34;&gt;Custom object factories and generic mapping methods&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s now possible to plug in custom factories for the instantiation of objects. MapStruct considers any method with a return type but no parameters as factory method. If such a method is present for a given mapping target type, the value will be obtained by invoking that method instead of instantiating the target type via &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Both, mapping and factory methods can optionally receive the expected target type through a specifically marked parameter. This allows for powerful generic mapping methods, e.g. for loading referenced entities when mapping from a DTO (data transfer object) model to an entity model. The following shows an example:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
public class OrderDto {

    private long customerId;
    // getters, setters...
}

public class OrderEntity {

    private CustomerEntity customer;
    // getters, setters...
}

// A manually implemented repository for loading entities
public class CustomerRepository {

    public &amp;lt;T&amp;gt; T loadById(long id, @TargetType Class&amp;lt;T&amp;gt; entityType) {
        // load entity by id...
    }
}

@Mapper(uses = CustomerRepository.class)
public interface OrderMapper {

    @Mapping(source = &#34;customerId&#34;, target = &#34;customer&#34;)
    OrderEntity orderDtoToOrderEntity(OrderDto orderDto);
}
&lt;/pre&gt;

&lt;p&gt;When generating an implementation of the &lt;code&gt;orderDtoToOrderEntity()&lt;/code&gt; method, MapStruct will apply the hand-written &lt;code&gt;loadById()&lt;/code&gt; method of the repository class to map the customer id in &lt;code&gt;OrderDto&lt;/code&gt; to the corresponding customer entity referenced by the resulting order entity. By annotating a parameter with &lt;code&gt;@TargetType&lt;/code&gt;, you advice MapStruct to pass the expected target type via that parameter. This type can then be used for instance to load the right entity via JPA/Hibernate.&lt;/p&gt;

&lt;h3 id=&#34;customizing-mapping-logic-using-decorators&#34;&gt;Customizing mapping logic using decorators&lt;/h3&gt;

&lt;p&gt;You can now utilize the &lt;a href=&#34;https://en.wikipedia.org/wiki/Decorator_pattern&#34;&gt;decorator pattern&lt;/a&gt; to customize generated mapping routines. A common use case is to set additional attributes in the target object of a mapping. E.g. let&amp;rsquo;s assume you want to customize the behavior of the &lt;code&gt;personToPersonDto()&lt;/code&gt; method of the following mapper:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper
@DecoratedWith(PersonMapperDecorator.class)
public interface PersonMapper {

    PersonMapper INSTANCE = Mappers.getMapper( PersonMapper.class );

    PersonDto personToPersonDto(Person person);

    AddressDto addressToAddressDto(Address address);
}
&lt;/pre&gt;

&lt;p&gt;The decorator must be a sub-type of the mapper type must and needs to be registered using the &lt;code&gt;@DecoratedWith&lt;/code&gt; annotation. It&amp;rsquo;s often useful to declare it as an abstract class which allows to implement only those methods which you want to customize:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
public abstract class PersonMapperDecorator implements PersonMapper {

    private final PersonMapper delegate;

    public PersonMapperDecorator(PersonMapper delegate) {
        this.delegate = delegate;
    }

    @Override
    public PersonDto personToPersonDto(Person person) {
        PersonDto dto = delegate.personToPersonDto( person );
        dto.setFullName( person.getFirstName() + &#34; &#34; + person.getLastName() );
        return dto;
    }
}
&lt;/pre&gt;

&lt;p&gt;As shown in the example, you can optionally declare a constructor which receives a delegate with the generated mapper implementation. This delegate can be used in the decorator methods to invoke the default mapping routine and then amend the result object. All methods not implemented by the decorator class will just be routed through to the delegate.&lt;/p&gt;

&lt;p&gt;Note that the delegate feature is experimental as of this release and may change in future versions. Also it&amp;rsquo;s subject to some limitations for the time being, e.g. only a single decorator can be applied (a decorator chain will be possible in the future) and it is only supported for the default component model but not when using the CDI and Spring component models.&lt;/p&gt;

&lt;h3 id=&#34;what-else-is-in-it&#34;&gt;What else is in it?&lt;/h3&gt;

&lt;p&gt;The Beta1 release comes with some more features which you may find helpful.&lt;/p&gt;

&lt;p&gt;You can now generate mappers from abstract classes (instead of interfaces) which is useful if you want to provide some manually implemented mapping methods. MapStruct also can generate now mapping methods between different &lt;a href=&#34;http://mapstruct.org/documentation/#section-07&#34;&gt;enum types&lt;/a&gt;. The complete change log is available &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?milestone=3&amp;amp;state=closed&#34;&gt;here&lt;/a&gt;. Be sure to check out the &lt;a href=&#34;http://mapstruct.org/documentation&#34;&gt;reference documentation&lt;/a&gt; to learn more about all the new functionality.&lt;/p&gt;

&lt;p&gt;As always any feedback is highly welcome. Just add a comment below or join the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group. Bugs and feature requests can be reported in the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt; and your pull request on GitHub is always welcome. The &lt;a href=&#34;http://mapstruct.org/contributing&#34;&gt;development guide&lt;/a&gt; has also been updated and provides all the info you need to get started with hacking on MapStruct.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MapStruct 1.0.0.Alpha2 has landed!</title>
      <link>http://mapstruct.org/news/2013-11-28-mapstruct-1_0_0_Alpha2-has-landed/</link>
      <pubDate>Thu, 28 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2013-11-28-mapstruct-1_0_0_Alpha2-has-landed/</guid>
      <description>

&lt;p&gt;It is my great pleasure to announce the release of MapStruct 1.0.0.Alpha2.&lt;/p&gt;

&lt;p&gt;This took us a bit longer than expected, but the new release offers quite a few exciting new features we hope you&amp;rsquo;ll enjoy. The JARs have already been synched to Maven Central. The coordinates are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct&amp;amp;#124;1.0.0.Alpha2&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct:1.0.0.Alpha2&lt;/a&gt; for the annotation JAR and&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.maven.org/#artifactdetails&amp;amp;#124;org.mapstruct&amp;amp;#124;mapstruct-processor&amp;amp;#124;1.0.0.Alpha2&amp;amp;#124;jar&#34;&gt;org.mapstruct:mapstruct-processor:1.0.0.Alpha2&lt;/a&gt; for the annotation processor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively you can get a &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/1.0.0.Alpha2/&#34;&gt;distribution bundle&lt;/a&gt; from SourceForge.&lt;/p&gt;

&lt;p&gt;Beside several new mapping features (e.g. combining several sources into one target object) the release provides integration with CDI and Spring to make the retrieval of mapper objects more comfortable. We&amp;rsquo;ve added several new implicit data type conversions and there is now also support for converting &lt;code&gt;Map&lt;/code&gt; objects.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s have a closer look at some of the additions.&lt;/p&gt;

&lt;h3 id=&#34;advanced-mapping-features&#34;&gt;Advanced mapping features&lt;/h3&gt;

&lt;p&gt;When working with data transfer objects (DTO) to pass data from the backend to the client, it is common to have one DTO which transports the data from several entities. For this purpose MapStruct supports now mapping methods with several source methods. The following shows an example:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper
public interface OrderMapper {

    @Mappings({
        @Mapping(source = &#34;order.name&#34;, target = &#34;name&#34;),
        @Mapping(source = &#34;houseNo&#34;, target = &#34;houseNumber&#34;)
    })
    OrderDto orderAndAddressToOrderDto(Order order, Address deliveryAddress);
}
&lt;/pre&gt;

&lt;p&gt;As for single parameter methods all attributes are mapped by name from the source objects to the target object, performing a type conversion if required. In case a property with the same name exists in more than one source object, the source parameter from which to retrieve the property must be specified using the &lt;code&gt;@Mapping&lt;/code&gt; annotation as shown for the &lt;code&gt;name&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;One of the core principles in MapStruct is type-safety. Therefore an error will be raised at generation time when such an ambiguity is not resolved. Note that when mapping a property which only exists once in the source objects to another target property name, it is optional to specify the source parameter&amp;rsquo;s name.&lt;/p&gt;

&lt;p&gt;Also related to type-safety and correctness of generated mappings is the new option to raise an error in case an attribute of the mapping target is not populated, as this typically indicates an oversight or configuration error. By default a compiler warning is created in this case. To change this e.g. into a compile error instead, the &lt;code&gt;unmappedTargetPolicy&lt;/code&gt; property can be used like this:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper(unmappedTargetPolicy=ERROR)
public interface OrderMapper {
    
    //...
}
&lt;/pre&gt;

&lt;p&gt;In some cases it is required to update an existing object with the properties from a given source object instead of instantiating a new target object. This use case can be addressed with help of the &lt;code&gt;@MappingTarget&lt;/code&gt; annotation which denotes one method parameter as the target of the mapping like this:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper
public interface OrderMapper {

    void updateOrderEntityFromDto(OrderDto dto, @MappingTarget Order order);
}
&lt;/pre&gt;

&lt;p&gt;Instead of instantiating a new &lt;code&gt;Order&lt;/code&gt; object, the generated implementation of &lt;code&gt;updateOrderEntityFromDto()&lt;/code&gt; method will update the given order instance with the attributes from the passed &lt;code&gt;OrderDto&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;more-implicit-type-conversions&#34;&gt;More implicit type conversions&lt;/h3&gt;

&lt;p&gt;Several new implicit type conversions have been added for the case that the source and target type of a mapped property differ. &lt;code&gt;BigDecimal&lt;/code&gt; and &lt;code&gt;BigInteger&lt;/code&gt; can now automatically be converted into other numeric types as well as into &lt;code&gt;String&lt;/code&gt;. You can finde a list of all supported conversions in the &lt;a href=&#34;http://localhost:4242/documentation/#section-05-01&#34;&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please beware of a possible value or precision loss when performing such conversions from larger to smaller numeric types. It &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues/5&#34;&gt;is planned&lt;/a&gt; for the next milestone to optionally raise a warning in this case.&lt;/p&gt;

&lt;p&gt;It is now also possible to convert &lt;code&gt;Date&lt;/code&gt; into &lt;code&gt;String&lt;/code&gt; and vice versa. For that purpose a new parameter has been added to the &lt;code&gt;@Mapping&lt;/code&gt; annotation which allows to specify a format string as interpreted by &lt;code&gt;SimpleDateFormat&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper
public interface OrderMapper {

    @Mapping(source=&#34;orderDate&#34;, dateFormat=&#34;dd.MM.yyyy HH:mm:ss&#34;)
    OrderDto orderToOrderDto(Order order);
}
&lt;/pre&gt;

&lt;h3 id=&#34;integration-with-cdi-and-spring&#34;&gt;Integration with CDI and Spring&lt;/h3&gt;

&lt;p&gt;The recommended way for obtaining mapper instances in the 1.0.0.Alpha1 release was to use the &lt;code&gt;Mappers&lt;/code&gt; factory.&lt;/p&gt;

&lt;p&gt;Alternatively it is now also possible to work with dependency injection. To make this possible, MapStruct can generate mappers which are CDI or Spring beans, based on which flavor of DI you prefer. In the following example MapStruct is adviced to make the generated mapper implementation a CDI bean by specifying &amp;ldquo;cdi&amp;rdquo; via the &lt;code&gt;componentModel&lt;/code&gt; attribute in the &lt;code&gt;@Mapper&lt;/code&gt; annotation:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper(componentModel=&#34;cdi&#34;)
public interface OrderMapper {

    //...
}
&lt;/pre&gt;

&lt;p&gt;This allows to obtain an order mapper simply via &lt;code&gt;@Inject&lt;/code&gt; (provided you have CDI enabled within your application):&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Inject
private OrderMapper orderMapper;
}
&lt;/pre&gt;

&lt;p&gt;Note that all other mappers a generated mapper class references are also obtained via the configured component model. So if you e.g. hook in hand-written mapper classes via &lt;code&gt;@Mapper#uses()&lt;/code&gt; make sure that these mappers are compliant with the chosen component model, e.g. are CDI beans themselves. Refer to the documentation which &lt;a href=&#34;http://mapstruct.org/documentation/#section-04-02&#34;&gt;describes&lt;/a&gt; all the specifics in detail.&lt;/p&gt;

&lt;p&gt;On a related note, if you prefer to work with the &lt;code&gt;Mappers&lt;/code&gt; factory as before, you&amp;rsquo;ll have to adapt your imports because this class has been moved to the new package &lt;code&gt;org.mapstruct.factory&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;further-info&#34;&gt;Further info&lt;/h3&gt;

&lt;p&gt;This concludes our tour through the new features in MapStruct 1.0.0.Alpha2. You can find the complete list of addressed issues in the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues?milestone=2&amp;amp;state=closed&#34;&gt;change log&lt;/a&gt; on GitHub. The &lt;a href=&#34;http://mapstruct.org/documentation&#34;&gt;reference documentation&lt;/a&gt; has been updated to cover all new functionality.&lt;/p&gt;

&lt;p&gt;If you have any kind of feedback please make sure to let us know. Either post a comment here or open a discussion in the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;mapstruct-users&lt;/a&gt; group. Bugs and feature requests can be reported in the &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt; and your pull request on GitHub is highly welcome! The &lt;a href=&#34;http://mapstruct.org/contributing&#34;&gt;contribution guide&lt;/a&gt; has all the info you need to get started with hacking on MapStruct.&lt;/p&gt;

&lt;p&gt;Many thanks to &lt;a href=&#34;https://github.com/agudian&#34;&gt;Andreas Gudian&lt;/a&gt; and &lt;a href=&#34;https://github.com/kryger&#34;&gt;Lukasz Kryger&lt;/a&gt; who contributed to this release, that&amp;rsquo;s awesome!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Announcing MapStruct</title>
      <link>http://mapstruct.org/news/2013-06-03-announcing-mapstruct/</link>
      <pubDate>Mon, 03 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://mapstruct.org/news/2013-06-03-announcing-mapstruct/</guid>
      <description>

&lt;p&gt;It is my pleasure to announce the first release of the MapStruct project!&lt;/p&gt;

&lt;p&gt;MapStruct is a code generator which simplifies the implementation of mappings between Java bean types by generating mapping code at compile time, following a convention-over-configuration approach.&lt;/p&gt;

&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;

&lt;p&gt;In multi-layered applications there is often the need to map between objects from diffent models.&lt;/p&gt;

&lt;p&gt;Examples include the conversion from JPA entities into data transfer or view objects and the mapping between the internal model of an application and external-facing representations such as the types of a web service facade.&lt;/p&gt;

&lt;p&gt;Writing the required mapping code from hand can be an error-prone and tedious task. MapStruct aims at simplifying this work by automating it as much as possible.&lt;/p&gt;

&lt;h3 id=&#34;the-solution&#34;&gt;The solution&lt;/h3&gt;

&lt;p&gt;MapStruct is an annotation processor which is plugged into the Java compiler and generates mapping code at build time.&lt;/p&gt;

&lt;p&gt;Unlike reflection-based mapping solutions, the mapping code generated by MapStruct uses plain method invocations for propagating values from the source to the target model and thus is fast, type-safe and easy to understand. This approach also allows for fast developer feedback; for instance you will get an error report at build time if two entities or attributes can‚Äôt be mapped.&lt;/p&gt;

&lt;h3 id=&#34;some-code-please&#34;&gt;Some code, please&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s time to have a look at some code. Let&amp;rsquo;s assume there as an entity &lt;code&gt;Car&lt;/code&gt; and an accompanying data transfer object.&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
public class Car {

    private String make;
    private int numberOfSeats;
    private Date manufacturingDate;
    private Person driver;
    private Category category; //an enum; SEDAN, CONVERTIBLE etc.

    //constructor, getters, setters etc.
}
&lt;/pre&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
public class CarDto {

    private String make;
    private int seatCount;
    private Date manufacturingYear;
    private PersonDto driver;
    private String category;

    //constructor, getters, setters etc.
}
&lt;/pre&gt;

&lt;p&gt;Both types are structure-wise quite similar, with only a few differences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the attribute representing the number of seats is named &lt;code&gt;numberOfSeats&lt;/code&gt; in the entity but &lt;code&gt;seatCount&lt;/code&gt; in the DTO&lt;/li&gt;
&lt;li&gt;the attribute representing the manufacturing year is once named &lt;code&gt;manufacturingDate&lt;/code&gt; and once &lt;code&gt;manufacturingYear&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;category&lt;/code&gt; attribute is an enum in the entity but a string in the DTO&lt;/li&gt;
&lt;li&gt;the object referenced by the &lt;code&gt;driver&lt;/code&gt; attribute is once of type &lt;code&gt;Person&lt;/code&gt; (another entity) and once of type &lt;code&gt;PersonDto&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let&amp;rsquo;s see how to generate a mapper for these objects. To do so, just define a plain Java interface which declares a method for each required mapping:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper
public interface CarMapper {

    @Mappings({
        @Mapping(source = &#34;numberOfSeats&#34;, target = &#34;seatCount&#34;),
        @Mapping(source = &#34;manufacturingDate&#34;, target = &#34;manufacturingYear&#34;)
    })
    CarDto carToCarDto(Car car);

    PersonDto personToPersonDto(Person person);
}
&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;@Mapper&lt;/code&gt; annotation marks the interface as mapping interface and lets the MapStruct processor kick in during compilation (see the &lt;a href=&#34;#{site.base_url}/documentation/#section-02&#34;&gt;reference documentation&lt;/a&gt; to learn how to hook the processor into your build). You can have several mapper interfaces as per your requirements, e.g. one per application module.&lt;/p&gt;

&lt;p&gt;Each mapping methods expects the source object as parameter and returns the target object. The names can be freely chosen. For attributes with different names in source and target object, the &lt;code&gt;@Mapping&lt;/code&gt; annotation can be used to configure the names.&lt;/p&gt;

&lt;p&gt;When mapping attributes with different types in source and target bean, MapStruct will first look whether another mapping method for these types exists. So for instance the implementation of the &lt;code&gt;carToCarDto()&lt;/code&gt; method will invoke &lt;code&gt;personToPersonDto()&lt;/code&gt; to convert the referenced driver from &lt;code&gt;Person&lt;/code&gt; to &lt;code&gt;PersonDto&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If no mapping method for the required types exist, an automatic conversion will be applied if possible; e.g. the &lt;code&gt;category&lt;/code&gt; attribute will be converted from the enumeration type into a string. There are many type conversions built into MapStruct by default but you also can easily implement custom mapping methods if required. Refer to &lt;a href=&#34;#{site.base_url}/documentation/#section-05&#34;&gt;Data type conversions&lt;/a&gt; for the details.&lt;/p&gt;

&lt;p&gt;To obtain an instance of a mapper the method &lt;code&gt;Mappers#getMapper()&lt;/code&gt; can be used. By convention, each mapper interface defines a member named &lt;code&gt;INSTANCE&lt;/code&gt; holding an instance of the mapper type:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Mapper
public interface CarMapper {

    CarMapper INSTANCE = Mappers.getMapper( CarMapper.class );

    //...
}
&lt;/pre&gt;

&lt;p&gt;In the future it will also &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues/32&#34;&gt;be possible&lt;/a&gt; to obtain mapper objects using dependency injection containers such as CDI or Spring.&lt;/p&gt;

&lt;p&gt;Finally let&amp;rsquo;s have a look at how the mapper is used to convert a &lt;code&gt;Car&lt;/code&gt; object into a &lt;code&gt;CarDto&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;
@Test
public void shouldMapAttributeByName() {
    //given
    Car car = new Car(
        &#34;Morris&#34;,
        2,
        new GregorianCalendar( 1980, 0, 1 ).getTime(),
        new Person( &#34;Bob&#34; ),
        Category.SEDAN
    );

    //when
    CarDto carDto = CarMapper.INSTANCE.carToCarDto( car );

    //then
    assertThat( carDto ).isNotNull();
    assertThat( carDto.getMake() ).isEqualTo( &#34;Morris&#34; );
    assertThat( carDto.getSeatCount() ).isEqualTo( 2 );
    assertThat( carDto.getManufacturingYear() ).isEqualTo( new GregorianCalendar( 1980, 0, 1 ).getTime() );
    assertThat( carDto.getDriver().getName() ).isEqualTo( &#34;Bob&#34; );
    assertThat( carDto.getCategory() ).isEqualTo( &#34;SEDAN&#34; );
}
&lt;/pre&gt;

&lt;p&gt;Note that a dedicated mapper interface centered around the types of your application makes mappings type-safe, so unlike with a generic mapping API you can&amp;rsquo;t accidentally map e.g. a &lt;code&gt;Car&lt;/code&gt; into a &lt;code&gt;PersonDto&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The test also shows that the implementation of the &lt;code&gt;carToCarDto()&lt;/code&gt; method handles the property name mappings (e.g. &lt;code&gt;numberOfSeats&lt;/code&gt; vs. &lt;code&gt;seatCount&lt;/code&gt;) as well as type conversions (for the &lt;code&gt;driver&lt;/code&gt; and &lt;code&gt;category&lt;/code&gt; attributes).&lt;/p&gt;

&lt;h3 id=&#34;trying-it-out-youself&#34;&gt;Trying it out youself&lt;/h3&gt;

&lt;p&gt;You want to give MapStruct a try? That&amp;rsquo;s great! You can download the distribution containing source and binaries from &lt;a href=&#34;http://sourceforge.net/projects/mapstruct/files/&#34;&gt;SourceForge&lt;/a&gt;. MapStruct is released under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache Software License 2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using Maven or a similar dependency manager, you also can obtain MapStruct from Maven Central. The GAV coordinates are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.mapstruct:mapstruct:1.0.0.Alpha1&lt;/em&gt; for the core module containing the annotations and&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.mapstruct:mapstruct-processor:1.0.0.Alpha1&lt;/em&gt; for the annotation processor module.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the &lt;a href=&#34;#{site.base_url}/documentation&#34;&gt;reference documentation&lt;/a&gt; to learn about all the ins and outs of MapStruct, including features such as collection mappings, reverse mappings or making use of hand-written mapping methods.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re are stuck, come and join the MapStruct &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users&#34;&gt;google-group&lt;/a&gt; and ask your questions there. This is also the right place to discuss any feature requests or other suggestions. And should you find a bug, please file a report in our &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;

&lt;p&gt;MapStruct is just in its beginnings. Today&amp;rsquo;s Alpha1 release is the first of a series of preview releases towards 1.0.0.Final.&lt;/p&gt;

&lt;p&gt;If you have any feedback on MapStruct in general or certain features in particular make sure to let us know either by commenting here or by posting to the Google group.&lt;/p&gt;

&lt;p&gt;On the roadmap for the next releases are improved support for &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues/4&#34;&gt;collection mappings&lt;/a&gt;, mappings &lt;a href=&#34;https://github.com/mapstruct/mapstruct/issues/31&#34;&gt;several source objects&lt;/a&gt; into one target object and mapping into immutable objects via constructor invocations.&lt;/p&gt;

&lt;p&gt;You like MapStruct and want to contribute? That&amp;rsquo;s awesome! MapStruct is in a very early stage and your participation can make a big difference. &lt;a href=&#34;http://github.com/mapstruct/mapstruct&#34;&gt;The sources&lt;/a&gt; are hosted on GitHub, and &lt;a href=&#34;#{site.base_url}/documentation/#section-05&#34;&gt;Contributing&lt;/a&gt; has all the infos to get you started with hacking on MapStruct. Many thanks to &lt;a href=&#34;https://github.com/agudian&#34;&gt;Andreas&lt;/a&gt; who stepped up and contributed to the Alpha1 release!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>